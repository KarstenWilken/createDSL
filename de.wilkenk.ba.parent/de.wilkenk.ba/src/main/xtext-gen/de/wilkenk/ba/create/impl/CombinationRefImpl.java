/**
 * generated by Xtext 2.10.0
 */
package de.wilkenk.ba.create.impl;

import de.wilkenk.ba.create.Combination;
import de.wilkenk.ba.create.CombinationPart;
import de.wilkenk.ba.create.CombinationRef;
import de.wilkenk.ba.create.CreatePackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Combination Ref</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.wilkenk.ba.create.impl.CombinationRefImpl#getCombination <em>Combination</em>}</li>
 *   <li>{@link de.wilkenk.ba.create.impl.CombinationRefImpl#getPart <em>Part</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CombinationRefImpl extends ConditionTargetsImpl implements CombinationRef
{
  /**
   * The cached value of the '{@link #getCombination() <em>Combination</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCombination()
   * @generated
   * @ordered
   */
  protected Combination combination;

  /**
   * The default value of the '{@link #getPart() <em>Part</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPart()
   * @generated
   * @ordered
   */
  protected static final CombinationPart PART_EDEFAULT = CombinationPart.COMBINATION_NAME;

  /**
   * The cached value of the '{@link #getPart() <em>Part</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPart()
   * @generated
   * @ordered
   */
  protected CombinationPart part = PART_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CombinationRefImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CreatePackage.Literals.COMBINATION_REF;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Combination getCombination()
  {
    if (combination != null && combination.eIsProxy())
    {
      InternalEObject oldCombination = (InternalEObject)combination;
      combination = (Combination)eResolveProxy(oldCombination);
      if (combination != oldCombination)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, CreatePackage.COMBINATION_REF__COMBINATION, oldCombination, combination));
      }
    }
    return combination;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Combination basicGetCombination()
  {
    return combination;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCombination(Combination newCombination)
  {
    Combination oldCombination = combination;
    combination = newCombination;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CreatePackage.COMBINATION_REF__COMBINATION, oldCombination, combination));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CombinationPart getPart()
  {
    return part;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPart(CombinationPart newPart)
  {
    CombinationPart oldPart = part;
    part = newPart == null ? PART_EDEFAULT : newPart;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CreatePackage.COMBINATION_REF__PART, oldPart, part));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CreatePackage.COMBINATION_REF__COMBINATION:
        if (resolve) return getCombination();
        return basicGetCombination();
      case CreatePackage.COMBINATION_REF__PART:
        return getPart();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CreatePackage.COMBINATION_REF__COMBINATION:
        setCombination((Combination)newValue);
        return;
      case CreatePackage.COMBINATION_REF__PART:
        setPart((CombinationPart)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CreatePackage.COMBINATION_REF__COMBINATION:
        setCombination((Combination)null);
        return;
      case CreatePackage.COMBINATION_REF__PART:
        setPart(PART_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CreatePackage.COMBINATION_REF__COMBINATION:
        return combination != null;
      case CreatePackage.COMBINATION_REF__PART:
        return part != PART_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (part: ");
    result.append(part);
    result.append(')');
    return result.toString();
  }

} //CombinationRefImpl
