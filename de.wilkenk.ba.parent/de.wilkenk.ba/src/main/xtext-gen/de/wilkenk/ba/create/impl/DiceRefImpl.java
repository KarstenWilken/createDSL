/**
 * generated by Xtext 2.10.0
 */
package de.wilkenk.ba.create.impl;

import de.wilkenk.ba.create.CreatePackage;
import de.wilkenk.ba.create.Dice;
import de.wilkenk.ba.create.DicePart;
import de.wilkenk.ba.create.DiceRef;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Dice Ref</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.wilkenk.ba.create.impl.DiceRefImpl#getDice <em>Dice</em>}</li>
 *   <li>{@link de.wilkenk.ba.create.impl.DiceRefImpl#getPart <em>Part</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DiceRefImpl extends MathExpressionImpl implements DiceRef
{
  /**
   * The cached value of the '{@link #getDice() <em>Dice</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDice()
   * @generated
   * @ordered
   */
  protected Dice dice;

  /**
   * The cached value of the '{@link #getPart() <em>Part</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPart()
   * @generated
   * @ordered
   */
  protected DicePart part;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DiceRefImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CreatePackage.Literals.DICE_REF;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Dice getDice()
  {
    if (dice != null && dice.eIsProxy())
    {
      InternalEObject oldDice = (InternalEObject)dice;
      dice = (Dice)eResolveProxy(oldDice);
      if (dice != oldDice)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, CreatePackage.DICE_REF__DICE, oldDice, dice));
      }
    }
    return dice;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Dice basicGetDice()
  {
    return dice;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDice(Dice newDice)
  {
    Dice oldDice = dice;
    dice = newDice;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CreatePackage.DICE_REF__DICE, oldDice, dice));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DicePart getPart()
  {
    return part;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPart(DicePart newPart, NotificationChain msgs)
  {
    DicePart oldPart = part;
    part = newPart;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CreatePackage.DICE_REF__PART, oldPart, newPart);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPart(DicePart newPart)
  {
    if (newPart != part)
    {
      NotificationChain msgs = null;
      if (part != null)
        msgs = ((InternalEObject)part).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CreatePackage.DICE_REF__PART, null, msgs);
      if (newPart != null)
        msgs = ((InternalEObject)newPart).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CreatePackage.DICE_REF__PART, null, msgs);
      msgs = basicSetPart(newPart, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CreatePackage.DICE_REF__PART, newPart, newPart));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CreatePackage.DICE_REF__PART:
        return basicSetPart(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CreatePackage.DICE_REF__DICE:
        if (resolve) return getDice();
        return basicGetDice();
      case CreatePackage.DICE_REF__PART:
        return getPart();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CreatePackage.DICE_REF__DICE:
        setDice((Dice)newValue);
        return;
      case CreatePackage.DICE_REF__PART:
        setPart((DicePart)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CreatePackage.DICE_REF__DICE:
        setDice((Dice)null);
        return;
      case CreatePackage.DICE_REF__PART:
        setPart((DicePart)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CreatePackage.DICE_REF__DICE:
        return dice != null;
      case CreatePackage.DICE_REF__PART:
        return part != null;
    }
    return super.eIsSet(featureID);
  }

} //DiceRefImpl
