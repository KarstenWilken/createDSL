/**
 * generated by Xtext 2.10.0
 */
package de.wilkenk.ba.create.impl;

import de.wilkenk.ba.create.Combination;
import de.wilkenk.ba.create.CombinationCondition;
import de.wilkenk.ba.create.CreatePackage;
import de.wilkenk.ba.create.Raise;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Combination</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.wilkenk.ba.create.impl.CombinationImpl#getConditions <em>Conditions</em>}</li>
 *   <li>{@link de.wilkenk.ba.create.impl.CombinationImpl#getRaise <em>Raise</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CombinationImpl extends EntityImpl implements Combination
{
  /**
   * The cached value of the '{@link #getConditions() <em>Conditions</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditions()
   * @generated
   * @ordered
   */
  protected EList<CombinationCondition> conditions;

  /**
   * The cached value of the '{@link #getRaise() <em>Raise</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRaise()
   * @generated
   * @ordered
   */
  protected Raise raise;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CombinationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CreatePackage.Literals.COMBINATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<CombinationCondition> getConditions()
  {
    if (conditions == null)
    {
      conditions = new EObjectContainmentEList<CombinationCondition>(CombinationCondition.class, this, CreatePackage.COMBINATION__CONDITIONS);
    }
    return conditions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Raise getRaise()
  {
    if (raise != null && raise.eIsProxy())
    {
      InternalEObject oldRaise = (InternalEObject)raise;
      raise = (Raise)eResolveProxy(oldRaise);
      if (raise != oldRaise)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, CreatePackage.COMBINATION__RAISE, oldRaise, raise));
      }
    }
    return raise;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Raise basicGetRaise()
  {
    return raise;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRaise(Raise newRaise)
  {
    Raise oldRaise = raise;
    raise = newRaise;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CreatePackage.COMBINATION__RAISE, oldRaise, raise));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CreatePackage.COMBINATION__CONDITIONS:
        return ((InternalEList<?>)getConditions()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CreatePackage.COMBINATION__CONDITIONS:
        return getConditions();
      case CreatePackage.COMBINATION__RAISE:
        if (resolve) return getRaise();
        return basicGetRaise();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CreatePackage.COMBINATION__CONDITIONS:
        getConditions().clear();
        getConditions().addAll((Collection<? extends CombinationCondition>)newValue);
        return;
      case CreatePackage.COMBINATION__RAISE:
        setRaise((Raise)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CreatePackage.COMBINATION__CONDITIONS:
        getConditions().clear();
        return;
      case CreatePackage.COMBINATION__RAISE:
        setRaise((Raise)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CreatePackage.COMBINATION__CONDITIONS:
        return conditions != null && !conditions.isEmpty();
      case CreatePackage.COMBINATION__RAISE:
        return raise != null;
    }
    return super.eIsSet(featureID);
  }

} //CombinationImpl
