/*
 * generated by Xtext 2.10.0
 */
package de.wilkenk.ba.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class CreateGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DomainmodelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.Domainmodel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cElementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cElementsEntityParserRuleCall_3_0 = (RuleCall)cElementsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// * root für die Grammatik.
		// * "game" als Sammelpunkt für alle auftretenden Aspekte der Charaktererstellung,
		// * da einige Aspekte nicht nur Einfluss auf die Charaktererstellung haben, sondern in der "Welt" verwurzelt sind.
		// * / Domainmodel: //	importSection=XImportSection?
		//	'game' name=QualifiedName '(' elements+=Entity* ')';
		@Override public ParserRule getRule() { return rule; }
		
		////	importSection=XImportSection?
		//'game' name=QualifiedName '(' elements+=Entity* ')'
		public Group getGroup() { return cGroup; }
		
		////	importSection=XImportSection?
		//'game'
		public Keyword getGameKeyword_0() { return cGameKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//elements+=Entity*
		public Assignment getElementsAssignment_3() { return cElementsAssignment_3; }
		
		//Entity
		public RuleCall getElementsEntityParserRuleCall_3_0() { return cElementsEntityParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.Entity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCharacterParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCombinationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAttributeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCombinedAttributeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDiceParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cRaiseParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cCategoryParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cDecisionTableParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		/// * mögliche Aspekte des Spiels * / Entity:
		//	Character | Combination | Attribute | CombinedAttribute | Dice | Raise | Category | DecisionTable;
		@Override public ParserRule getRule() { return rule; }
		
		//Character | Combination | Attribute | CombinedAttribute | Dice | Raise | Category | DecisionTable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Character
		public RuleCall getCharacterParserRuleCall_0() { return cCharacterParserRuleCall_0; }
		
		//Combination
		public RuleCall getCombinationParserRuleCall_1() { return cCombinationParserRuleCall_1; }
		
		//Attribute
		public RuleCall getAttributeParserRuleCall_2() { return cAttributeParserRuleCall_2; }
		
		//CombinedAttribute
		public RuleCall getCombinedAttributeParserRuleCall_3() { return cCombinedAttributeParserRuleCall_3; }
		
		//Dice
		public RuleCall getDiceParserRuleCall_4() { return cDiceParserRuleCall_4; }
		
		//Raise
		public RuleCall getRaiseParserRuleCall_5() { return cRaiseParserRuleCall_5; }
		
		//Category
		public RuleCall getCategoryParserRuleCall_6() { return cCategoryParserRuleCall_6; }
		
		//DecisionTable
		public RuleCall getDecisionTableParserRuleCall_7() { return cDecisionTableParserRuleCall_7; }
	}
	public class CharacterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.Character");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCharacterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesPropertyParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// * Charakterbeschreibung * / Character:
		//	'character' name=QualifiedName '('
		//	properties+=Property*
		//	//		(operations += Operation)*
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'character' name=QualifiedName '(' properties+=Property* //		(operations += Operation)*
		//')'
		public Group getGroup() { return cGroup; }
		
		//'character'
		public Keyword getCharacterKeyword_0() { return cCharacterKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//properties+=Property*
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_3_0() { return cPropertiesPropertyParserRuleCall_3_0; }
		
		////		(operations += Operation)*
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.Property");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cAttributeKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cAttrValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cAttrValueAttributeCrossReference_0_1_0 = (CrossReference)cAttrValueAssignment_0_1.eContents().get(0);
		private final RuleCall cAttrValueAttributeIDTerminalRuleCall_0_1_0_1 = (RuleCall)cAttrValueAttributeCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cCombinedAttributeKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCombAttrValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cCombAttrValueCombinedAttributeCrossReference_1_1_0 = (CrossReference)cCombAttrValueAssignment_1_1.eContents().get(0);
		private final RuleCall cCombAttrValueCombinedAttributeIDTerminalRuleCall_1_1_0_1 = (RuleCall)cCombAttrValueCombinedAttributeCrossReference_1_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cCombinationKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCombValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cCombValueCombinationCrossReference_2_1_0 = (CrossReference)cCombValueAssignment_2_1.eContents().get(0);
		private final RuleCall cCombValueCombinationIDTerminalRuleCall_2_1_0_1 = (RuleCall)cCombValueCombinationCrossReference_2_1_0.eContents().get(1);
		
		/// * Eigenschaften des Charakters. Beschreibende und Werteigenschaften * / Property:
		//	'attribute:' attrValue=[Attribute] |
		//	'combinedAttribute:' combAttrValue=[CombinedAttribute] |
		//	'combination:' combValue=[Combination];
		@Override public ParserRule getRule() { return rule; }
		
		//'attribute:' attrValue=[Attribute] | 'combinedAttribute:' combAttrValue=[CombinedAttribute] | 'combination:'
		//combValue=[Combination]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'attribute:' attrValue=[Attribute]
		public Group getGroup_0() { return cGroup_0; }
		
		//'attribute:'
		public Keyword getAttributeKeyword_0_0() { return cAttributeKeyword_0_0; }
		
		//attrValue=[Attribute]
		public Assignment getAttrValueAssignment_0_1() { return cAttrValueAssignment_0_1; }
		
		//[Attribute]
		public CrossReference getAttrValueAttributeCrossReference_0_1_0() { return cAttrValueAttributeCrossReference_0_1_0; }
		
		//ID
		public RuleCall getAttrValueAttributeIDTerminalRuleCall_0_1_0_1() { return cAttrValueAttributeIDTerminalRuleCall_0_1_0_1; }
		
		//'combinedAttribute:' combAttrValue=[CombinedAttribute]
		public Group getGroup_1() { return cGroup_1; }
		
		//'combinedAttribute:'
		public Keyword getCombinedAttributeKeyword_1_0() { return cCombinedAttributeKeyword_1_0; }
		
		//combAttrValue=[CombinedAttribute]
		public Assignment getCombAttrValueAssignment_1_1() { return cCombAttrValueAssignment_1_1; }
		
		//[CombinedAttribute]
		public CrossReference getCombAttrValueCombinedAttributeCrossReference_1_1_0() { return cCombAttrValueCombinedAttributeCrossReference_1_1_0; }
		
		//ID
		public RuleCall getCombAttrValueCombinedAttributeIDTerminalRuleCall_1_1_0_1() { return cCombAttrValueCombinedAttributeIDTerminalRuleCall_1_1_0_1; }
		
		//'combination:' combValue=[Combination]
		public Group getGroup_2() { return cGroup_2; }
		
		//'combination:'
		public Keyword getCombinationKeyword_2_0() { return cCombinationKeyword_2_0; }
		
		//combValue=[Combination]
		public Assignment getCombValueAssignment_2_1() { return cCombValueAssignment_2_1; }
		
		//[Combination]
		public CrossReference getCombValueCombinationCrossReference_2_1_0() { return cCombValueCombinationCrossReference_2_1_0; }
		
		//ID
		public RuleCall getCombValueCombinationIDTerminalRuleCall_2_1_0_1() { return cCombValueCombinationIDTerminalRuleCall_2_1_0_1; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cValueKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cIntValueAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cIntValueINTTerminalRuleCall_3_1_0_0 = (RuleCall)cIntValueAssignment_3_1_0.eContents().get(0);
		private final Assignment cStringValueAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cStringValueSTRINGTerminalRuleCall_3_1_1_0 = (RuleCall)cStringValueAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cInitialValueKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInitialValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInitialValueInitialAttributeDecisionParserRuleCall_4_1_0 = (RuleCall)cInitialValueAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cTypeKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cValueTypeAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final Alternatives cValueTypeAlternatives_5_1_0 = (Alternatives)cValueTypeAssignment_5_1.eContents().get(0);
		private final Keyword cValueTypeIntegerKeyword_5_1_0_0 = (Keyword)cValueTypeAlternatives_5_1_0.eContents().get(0);
		private final Keyword cValueTypeStringKeyword_5_1_0_1 = (Keyword)cValueTypeAlternatives_5_1_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cRangeKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cMinValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cMinValueINTTerminalRuleCall_6_1_0 = (RuleCall)cMinValueAssignment_6_1.eContents().get(0);
		private final Keyword cCommaKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Assignment cMaxValueAssignment_6_3 = (Assignment)cGroup_6.eContents().get(3);
		private final RuleCall cMaxValueINTTerminalRuleCall_6_3_0 = (RuleCall)cMaxValueAssignment_6_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCategoryKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cCategoryAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final CrossReference cCategoryCategoryCrossReference_7_1_0 = (CrossReference)cCategoryAssignment_7_1.eContents().get(0);
		private final RuleCall cCategoryCategoryIDTerminalRuleCall_7_1_0_1 = (RuleCall)cCategoryCategoryCrossReference_7_1_0.eContents().get(1);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cDescriptionKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cDescriptionAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_8_1_0 = (RuleCall)cDescriptionAssignment_8_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		/// * Möglichkeit eigene Methoden zu 'bauen' zur Erweiterung der Charaktermöglichkeiten, eventuell weg? (nice to have) * / //Operation:
		////    'op' name = ValidID 
		////		'('(params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)?')' ':' type=JvmTypeReference 
		////			body=XBlockExpression
		////;
		/// ***************************
		// * Attribute 
		// *************************** / / * kann rein textuelle Beschreibung sein, 
		// * kann Werte bekommen
		// * / Attribute:
		//	'attribute' name=QualifiedName '(' ('value:' (intValue=INT | stringValue=STRING))? ('initialValue:'
		//	initialValue=InitialAttributeDecision)? ('type:' valueType=('Integer' | 'String'))? ('range[' minValue=INT ','
		//	maxValue=INT ']')? ('category:' category=[Category])? ('description:' description=STRING)?
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'attribute' name=QualifiedName '(' ('value:' (intValue=INT | stringValue=STRING))? ('initialValue:'
		//initialValue=InitialAttributeDecision)? ('type:' valueType=('Integer' | 'String'))? ('range[' minValue=INT ','
		//maxValue=INT ']')? ('category:' category=[Category])? ('description:' description=STRING)? ')'
		public Group getGroup() { return cGroup; }
		
		//'attribute'
		public Keyword getAttributeKeyword_0() { return cAttributeKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//('value:' (intValue=INT | stringValue=STRING))?
		public Group getGroup_3() { return cGroup_3; }
		
		//'value:'
		public Keyword getValueKeyword_3_0() { return cValueKeyword_3_0; }
		
		//(intValue=INT | stringValue=STRING)
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//intValue=INT
		public Assignment getIntValueAssignment_3_1_0() { return cIntValueAssignment_3_1_0; }
		
		//INT
		public RuleCall getIntValueINTTerminalRuleCall_3_1_0_0() { return cIntValueINTTerminalRuleCall_3_1_0_0; }
		
		//stringValue=STRING
		public Assignment getStringValueAssignment_3_1_1() { return cStringValueAssignment_3_1_1; }
		
		//STRING
		public RuleCall getStringValueSTRINGTerminalRuleCall_3_1_1_0() { return cStringValueSTRINGTerminalRuleCall_3_1_1_0; }
		
		//('initialValue:' initialValue=InitialAttributeDecision)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'initialValue:'
		public Keyword getInitialValueKeyword_4_0() { return cInitialValueKeyword_4_0; }
		
		//initialValue=InitialAttributeDecision
		public Assignment getInitialValueAssignment_4_1() { return cInitialValueAssignment_4_1; }
		
		//InitialAttributeDecision
		public RuleCall getInitialValueInitialAttributeDecisionParserRuleCall_4_1_0() { return cInitialValueInitialAttributeDecisionParserRuleCall_4_1_0; }
		
		//('type:' valueType=('Integer' | 'String'))?
		public Group getGroup_5() { return cGroup_5; }
		
		//'type:'
		public Keyword getTypeKeyword_5_0() { return cTypeKeyword_5_0; }
		
		//valueType=('Integer' | 'String')
		public Assignment getValueTypeAssignment_5_1() { return cValueTypeAssignment_5_1; }
		
		//('Integer' | 'String')
		public Alternatives getValueTypeAlternatives_5_1_0() { return cValueTypeAlternatives_5_1_0; }
		
		//'Integer'
		public Keyword getValueTypeIntegerKeyword_5_1_0_0() { return cValueTypeIntegerKeyword_5_1_0_0; }
		
		//'String'
		public Keyword getValueTypeStringKeyword_5_1_0_1() { return cValueTypeStringKeyword_5_1_0_1; }
		
		//('range[' minValue=INT ',' maxValue=INT ']')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'range['
		public Keyword getRangeKeyword_6_0() { return cRangeKeyword_6_0; }
		
		//minValue=INT
		public Assignment getMinValueAssignment_6_1() { return cMinValueAssignment_6_1; }
		
		//INT
		public RuleCall getMinValueINTTerminalRuleCall_6_1_0() { return cMinValueINTTerminalRuleCall_6_1_0; }
		
		//','
		public Keyword getCommaKeyword_6_2() { return cCommaKeyword_6_2; }
		
		//maxValue=INT
		public Assignment getMaxValueAssignment_6_3() { return cMaxValueAssignment_6_3; }
		
		//INT
		public RuleCall getMaxValueINTTerminalRuleCall_6_3_0() { return cMaxValueINTTerminalRuleCall_6_3_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6_4() { return cRightSquareBracketKeyword_6_4; }
		
		//('category:' category=[Category])?
		public Group getGroup_7() { return cGroup_7; }
		
		//'category:'
		public Keyword getCategoryKeyword_7_0() { return cCategoryKeyword_7_0; }
		
		//category=[Category]
		public Assignment getCategoryAssignment_7_1() { return cCategoryAssignment_7_1; }
		
		//[Category]
		public CrossReference getCategoryCategoryCrossReference_7_1_0() { return cCategoryCategoryCrossReference_7_1_0; }
		
		//ID
		public RuleCall getCategoryCategoryIDTerminalRuleCall_7_1_0_1() { return cCategoryCategoryIDTerminalRuleCall_7_1_0_1; }
		
		//('description:' description=STRING)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'description:'
		public Keyword getDescriptionKeyword_8_0() { return cDescriptionKeyword_8_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_8_1() { return cDescriptionAssignment_8_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_8_1_0() { return cDescriptionSTRINGTerminalRuleCall_8_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_9() { return cRightParenthesisKeyword_9; }
	}
	public class AttributeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.AttributeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAttributeAttributeCrossReference_0_0 = (CrossReference)cAttributeAssignment_0.eContents().get(0);
		private final RuleCall cAttributeAttributeIDTerminalRuleCall_0_0_1 = (RuleCall)cAttributeAttributeCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPartAttributePartEnumRuleCall_2_0 = (RuleCall)cPartAssignment_2.eContents().get(0);
		
		/// * Regel um Attribut Variablen in Grammatik zu referenzieren. * / AttributeRef:
		//	attribute=[Attribute] '.' part=AttributePart;
		@Override public ParserRule getRule() { return rule; }
		
		//attribute=[Attribute] '.' part=AttributePart
		public Group getGroup() { return cGroup; }
		
		//attribute=[Attribute]
		public Assignment getAttributeAssignment_0() { return cAttributeAssignment_0; }
		
		//[Attribute]
		public CrossReference getAttributeAttributeCrossReference_0_0() { return cAttributeAttributeCrossReference_0_0; }
		
		//ID
		public RuleCall getAttributeAttributeIDTerminalRuleCall_0_0_1() { return cAttributeAttributeIDTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//part=AttributePart
		public Assignment getPartAssignment_2() { return cPartAssignment_2; }
		
		//AttributePart
		public RuleCall getPartAttributePartEnumRuleCall_2_0() { return cPartAttributePartEnumRuleCall_2_0; }
	}
	public class InitialAttributeDecisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.InitialAttributeDecision");
		private final Assignment cTypeAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTypeInitAttributeParserRuleCall_0 = (RuleCall)cTypeAssignment.eContents().get(0);
		
		/// * Initialwert Beschreibung für Attribute * / InitialAttributeDecision:
		//	type=InitAttribute;
		@Override public ParserRule getRule() { return rule; }
		
		//type=InitAttribute
		public Assignment getTypeAssignment() { return cTypeAssignment; }
		
		//InitAttribute
		public RuleCall getTypeInitAttributeParserRuleCall_0() { return cTypeInitAttributeParserRuleCall_0; }
	}
	public class InitAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.InitAttribute");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cValueKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cInitValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cInitValueINTTerminalRuleCall_0_1_0 = (RuleCall)cInitValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cDiceKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDiceEventAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDiceEventMathExpressionParserRuleCall_1_1_0 = (RuleCall)cDiceEventAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		/// * Initialwert kann Zahl oder Würfelergebnis sein * / InitAttribute:
		//	'value:' initValue=INT | 'dice(' diceEvent=MathExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'value:' initValue=INT | 'dice(' diceEvent=MathExpression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'value:' initValue=INT
		public Group getGroup_0() { return cGroup_0; }
		
		//'value:'
		public Keyword getValueKeyword_0_0() { return cValueKeyword_0_0; }
		
		//initValue=INT
		public Assignment getInitValueAssignment_0_1() { return cInitValueAssignment_0_1; }
		
		//INT
		public RuleCall getInitValueINTTerminalRuleCall_0_1_0() { return cInitValueINTTerminalRuleCall_0_1_0; }
		
		//'dice(' diceEvent=MathExpression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'dice('
		public Keyword getDiceKeyword_1_0() { return cDiceKeyword_1_0; }
		
		//diceEvent=MathExpression
		public Assignment getDiceEventAssignment_1_1() { return cDiceEventAssignment_1_1; }
		
		//MathExpression
		public RuleCall getDiceEventMathExpressionParserRuleCall_1_1_0() { return cDiceEventMathExpressionParserRuleCall_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class CategoryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.Category");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCategoryKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		/// * angedacht zur Kategorisierung von Eigenschaften * / Category:
		//	'category' name=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'category' name=STRING
		public Group getGroup() { return cGroup; }
		
		//'category'
		public Keyword getCategoryKeyword_0() { return cCategoryKeyword_0; }
		
		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}
	public class CombinedAttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.CombinedAttribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCombinedAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRangeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMinValueAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cMinValueINTTerminalRuleCall_4_0 = (RuleCall)cMinValueAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMaxValueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMaxValueINTTerminalRuleCall_6_0 = (RuleCall)cMaxValueAssignment_6.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cCombValueAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cCombValueMathExpressionParserRuleCall_8_0 = (RuleCall)cCombValueAssignment_8.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCategoryKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cCategoryAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final CrossReference cCategoryCategoryCrossReference_9_1_0 = (CrossReference)cCategoryAssignment_9_1.eContents().get(0);
		private final RuleCall cCategoryCategoryIDTerminalRuleCall_9_1_0_1 = (RuleCall)cCategoryCategoryCrossReference_9_1_0.eContents().get(1);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cDescriptionKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cDescriptionAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_10_1_0 = (RuleCall)cDescriptionAssignment_10_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		/// * kombiniertes Attribut, Wert setzt sich aus mehreren Attributen zusammen (berechneter Wert)
		// * Daher Unterschied zu Attribute
		// * / CombinedAttribute:
		//	'combinedAttribute' name=QualifiedName '('
		//	'range[' minValue=INT ',' maxValue=INT ']'
		//	combValue=MathExpression ('category:' category=[Category])? ('description:' description=STRING)?
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'combinedAttribute' name=QualifiedName '(' 'range[' minValue=INT ',' maxValue=INT ']' combValue=MathExpression
		//('category:' category=[Category])? ('description:' description=STRING)? ')'
		public Group getGroup() { return cGroup; }
		
		//'combinedAttribute'
		public Keyword getCombinedAttributeKeyword_0() { return cCombinedAttributeKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//'range['
		public Keyword getRangeKeyword_3() { return cRangeKeyword_3; }
		
		//minValue=INT
		public Assignment getMinValueAssignment_4() { return cMinValueAssignment_4; }
		
		//INT
		public RuleCall getMinValueINTTerminalRuleCall_4_0() { return cMinValueINTTerminalRuleCall_4_0; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//maxValue=INT
		public Assignment getMaxValueAssignment_6() { return cMaxValueAssignment_6; }
		
		//INT
		public RuleCall getMaxValueINTTerminalRuleCall_6_0() { return cMaxValueINTTerminalRuleCall_6_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7() { return cRightSquareBracketKeyword_7; }
		
		//combValue=MathExpression
		public Assignment getCombValueAssignment_8() { return cCombValueAssignment_8; }
		
		//MathExpression
		public RuleCall getCombValueMathExpressionParserRuleCall_8_0() { return cCombValueMathExpressionParserRuleCall_8_0; }
		
		//('category:' category=[Category])?
		public Group getGroup_9() { return cGroup_9; }
		
		//'category:'
		public Keyword getCategoryKeyword_9_0() { return cCategoryKeyword_9_0; }
		
		//category=[Category]
		public Assignment getCategoryAssignment_9_1() { return cCategoryAssignment_9_1; }
		
		//[Category]
		public CrossReference getCategoryCategoryCrossReference_9_1_0() { return cCategoryCategoryCrossReference_9_1_0; }
		
		//ID
		public RuleCall getCategoryCategoryIDTerminalRuleCall_9_1_0_1() { return cCategoryCategoryIDTerminalRuleCall_9_1_0_1; }
		
		//('description:' description=STRING)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'description:'
		public Keyword getDescriptionKeyword_10_0() { return cDescriptionKeyword_10_0; }
		
		//description=STRING
		public Assignment getDescriptionAssignment_10_1() { return cDescriptionAssignment_10_1; }
		
		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_10_1_0() { return cDescriptionSTRINGTerminalRuleCall_10_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_11() { return cRightParenthesisKeyword_11; }
	}
	public class CombinedAttributeRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.CombinedAttributeRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCombinedAttributeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cCombinedAttributeCombinedAttributeCrossReference_0_0 = (CrossReference)cCombinedAttributeAssignment_0.eContents().get(0);
		private final RuleCall cCombinedAttributeCombinedAttributeIDTerminalRuleCall_0_0_1 = (RuleCall)cCombinedAttributeCombinedAttributeCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPartCombinedAttributePartEnumRuleCall_2_0 = (RuleCall)cPartAssignment_2.eContents().get(0);
		
		/// * Regel um CombinedAttribut Variablen in Grammatik zu referenzieren. * / CombinedAttributeRef:
		//	combinedAttribute=[CombinedAttribute] '.' part=CombinedAttributePart;
		@Override public ParserRule getRule() { return rule; }
		
		//combinedAttribute=[CombinedAttribute] '.' part=CombinedAttributePart
		public Group getGroup() { return cGroup; }
		
		//combinedAttribute=[CombinedAttribute]
		public Assignment getCombinedAttributeAssignment_0() { return cCombinedAttributeAssignment_0; }
		
		//[CombinedAttribute]
		public CrossReference getCombinedAttributeCombinedAttributeCrossReference_0_0() { return cCombinedAttributeCombinedAttributeCrossReference_0_0; }
		
		//ID
		public RuleCall getCombinedAttributeCombinedAttributeIDTerminalRuleCall_0_0_1() { return cCombinedAttributeCombinedAttributeIDTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//part=CombinedAttributePart
		public Assignment getPartAssignment_2() { return cPartAssignment_2; }
		
		//CombinedAttributePart
		public RuleCall getPartCombinedAttributePartEnumRuleCall_2_0() { return cPartCombinedAttributePartEnumRuleCall_2_0; }
	}
	public class MathExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.MathExpression");
		private final RuleCall cAdditionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		/// ***************************
		// * Attribute Expression
		// *************************** / / * Mathematische Kombination von Attributen für "CombinatedAttributes" * / MathExpression:
		//	Addition;
		@Override public ParserRule getRule() { return rule; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall() { return cAdditionParserRuleCall; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdditionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		/// * Add & Sub * / Addition MathExpression:
		//	Multiplication ({Addition.left=current} op=('+' | '-') right=Multiplication)*
		@Override public ParserRule getRule() { return rule; }
		
		//Multiplication ({Addition.left=current} op=('+' | '-') right=Multiplication)*
		public Group getGroup() { return cGroup; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }
		
		//({Addition.left=current} op=('+' | '-') right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Addition.left=current}
		public Action getAdditionLeftAction_1_0() { return cAdditionLeftAction_1_0; }
		
		//op=('+' | '-')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('+' | '-')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'+'
		public Keyword getOpPlusSignKeyword_1_1_0_0() { return cOpPlusSignKeyword_1_1_0_0; }
		
		//'-'
		public Keyword getOpHyphenMinusKeyword_1_1_0_1() { return cOpHyphenMinusKeyword_1_1_0_1; }
		
		//right=Multiplication
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_2_0() { return cRightMultiplicationParserRuleCall_1_2_0; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		/// * Mult & Div * / Multiplication MathExpression:
		//	Primary ({Multiplication.left=current} op=('*' | '/') right=Primary)*
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({Multiplication.left=current} op=('*' | '/') right=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({Multiplication.left=current} op=('*' | '/') right=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Multiplication.left=current}
		public Action getMultiplicationLeftAction_1_0() { return cMultiplicationLeftAction_1_0; }
		
		//op=('*' | '/')
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }
		
		//('*' | '/')
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }
		
		//'*'
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }
		
		//'/'
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }
		
		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAttributeRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDiceRefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final RuleCall cAdditionParserRuleCall_3_1 = (RuleCall)cGroup_3.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//Primary MathExpression:
		//	IntRef | AttributeRef | DiceRef |
		//	'(' Addition ')'
		@Override public ParserRule getRule() { return rule; }
		
		//IntRef | AttributeRef | DiceRef | '(' Addition ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntRef
		public RuleCall getIntRefParserRuleCall_0() { return cIntRefParserRuleCall_0; }
		
		//AttributeRef
		public RuleCall getAttributeRefParserRuleCall_1() { return cAttributeRefParserRuleCall_1; }
		
		//DiceRef
		public RuleCall getDiceRefParserRuleCall_2() { return cDiceRefParserRuleCall_2; }
		
		//'(' Addition ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall_3_1() { return cAdditionParserRuleCall_3_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_2() { return cRightParenthesisKeyword_3_2; }
	}
	public class IntRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.IntRef");
		private final Assignment cIntValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIntValINTTerminalRuleCall_0 = (RuleCall)cIntValAssignment.eContents().get(0);
		
		//IntRef:
		//	intVal=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//intVal=INT
		public Assignment getIntValAssignment() { return cIntValAssignment; }
		
		//INT
		public RuleCall getIntValINTTerminalRuleCall_0() { return cIntValINTTerminalRuleCall_0; }
	}
	public class CombinationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.Combination");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCombinationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionsCombinationConditionParserRuleCall_3_0 = (RuleCall)cConditionsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRaiseAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cRaiseRaiseCrossReference_5_0 = (CrossReference)cRaiseAssignment_5.eContents().get(0);
		private final RuleCall cRaiseRaiseIDTerminalRuleCall_5_0_1 = (RuleCall)cRaiseRaiseCrossReference_5_0.eContents().get(1);
		
		/// ***************************
		// * Combination
		// *************************** / / * Combination 'sollen' mehrere Gruppierungsmöglichkeiten wiederspiegeln.
		// * Berufe, Auswirkungen auf mehrere Eigenschaften, Beschreibung umfassenderer "Zusammenstellungen"
		// * / Combination:
		//	'combination' name=ID '('
		//	conditions+=CombinationCondition*
		//	')'
		//	raise=[Raise];
		@Override public ParserRule getRule() { return rule; }
		
		//'combination' name=ID '(' conditions+=CombinationCondition* ')' raise=[Raise]
		public Group getGroup() { return cGroup; }
		
		//'combination'
		public Keyword getCombinationKeyword_0() { return cCombinationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//conditions+=CombinationCondition*
		public Assignment getConditionsAssignment_3() { return cConditionsAssignment_3; }
		
		//CombinationCondition
		public RuleCall getConditionsCombinationConditionParserRuleCall_3_0() { return cConditionsCombinationConditionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//raise=[Raise]
		public Assignment getRaiseAssignment_5() { return cRaiseAssignment_5; }
		
		//[Raise]
		public CrossReference getRaiseRaiseCrossReference_5_0() { return cRaiseRaiseCrossReference_5_0; }
		
		//ID
		public RuleCall getRaiseRaiseIDTerminalRuleCall_5_0_1() { return cRaiseRaiseIDTerminalRuleCall_5_0_1; }
	}
	public class CombinationRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.CombinationRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCombinationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cCombinationCombinationCrossReference_0_0 = (CrossReference)cCombinationAssignment_0.eContents().get(0);
		private final RuleCall cCombinationCombinationIDTerminalRuleCall_0_0_1 = (RuleCall)cCombinationCombinationCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPartCombinationPartEnumRuleCall_2_0 = (RuleCall)cPartAssignment_2.eContents().get(0);
		
		/// * Regel um Kombinationen Variablen in Grammatik zu referenzieren. * / CombinationRef:
		//	combination=[Combination] '.' part=CombinationPart;
		@Override public ParserRule getRule() { return rule; }
		
		//combination=[Combination] '.' part=CombinationPart
		public Group getGroup() { return cGroup; }
		
		//combination=[Combination]
		public Assignment getCombinationAssignment_0() { return cCombinationAssignment_0; }
		
		//[Combination]
		public CrossReference getCombinationCombinationCrossReference_0_0() { return cCombinationCombinationCrossReference_0_0; }
		
		//ID
		public RuleCall getCombinationCombinationIDTerminalRuleCall_0_0_1() { return cCombinationCombinationIDTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//part=CombinationPart
		public Assignment getPartAssignment_2() { return cPartAssignment_2; }
		
		//CombinationPart
		public RuleCall getPartCombinationPartEnumRuleCall_2_0() { return cPartCombinationPartEnumRuleCall_2_0; }
	}
	public class CombinationConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.CombinationCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCombinationConditionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionXExpressionParserRuleCall_3_0 = (RuleCall)cConditionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// * Vorbedingungen, damit Kombinationen erfüllt oder erhalten werden können. * / CombinationCondition:
		//	'combinationCondition' name=ID '('
		//	//TODO condition logic - reicht das so?
		//	condition=XExpression
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'combinationCondition' name=ID '(' //TODO condition logic - reicht das so?
		//condition=XExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'combinationCondition'
		public Keyword getCombinationConditionKeyword_0() { return cCombinationConditionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		////TODO condition logic - reicht das so?
		//condition=XExpression
		public Assignment getConditionAssignment_3() { return cConditionAssignment_3; }
		
		//XExpression
		public RuleCall getConditionXExpressionParserRuleCall_3_0() { return cConditionXExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class DiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.Dice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMaxValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMaxValueINTTerminalRuleCall_3_0 = (RuleCall)cMaxValueAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// ***************************
		// * Dice
		// *************************** / / * Würfel halt * / Dice:
		//	'dice' name=ID '('
		//	maxValue=INT
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'dice' name=ID '(' maxValue=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'dice'
		public Keyword getDiceKeyword_0() { return cDiceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//maxValue=INT
		public Assignment getMaxValueAssignment_3() { return cMaxValueAssignment_3; }
		
		//INT
		public RuleCall getMaxValueINTTerminalRuleCall_3_0() { return cMaxValueINTTerminalRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class DiceRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.DiceRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDiceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cDiceDiceCrossReference_0_0 = (CrossReference)cDiceAssignment_0.eContents().get(0);
		private final RuleCall cDiceDiceIDTerminalRuleCall_0_0_1 = (RuleCall)cDiceDiceCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPartDicePartParserRuleCall_2_0 = (RuleCall)cPartAssignment_2.eContents().get(0);
		
		/// * Regel um Dice Variablen in Grammatik zu referenzieren. * / DiceRef:
		//	dice=[Dice] '.' part=DicePart;
		@Override public ParserRule getRule() { return rule; }
		
		//dice=[Dice] '.' part=DicePart
		public Group getGroup() { return cGroup; }
		
		//dice=[Dice]
		public Assignment getDiceAssignment_0() { return cDiceAssignment_0; }
		
		//[Dice]
		public CrossReference getDiceDiceCrossReference_0_0() { return cDiceDiceCrossReference_0_0; }
		
		//ID
		public RuleCall getDiceDiceIDTerminalRuleCall_0_0_1() { return cDiceDiceIDTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//part=DicePart
		public Assignment getPartAssignment_2() { return cPartAssignment_2; }
		
		//DicePart
		public RuleCall getPartDicePartParserRuleCall_2_0() { return cPartDicePartParserRuleCall_2_0; }
	}
	public class DicePartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.DicePart");
		private final Assignment cThrowAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cThrowThrowKeyword_0 = (Keyword)cThrowAssignment.eContents().get(0);
		
		/// * Liste der möglichen Variablen, 
		// * muss bei Veränderung von Dice angepasst/ergänzt werden
		// * / DicePart:
		//	throw='throw';
		@Override public ParserRule getRule() { return rule; }
		
		//throw='throw'
		public Assignment getThrowAssignment() { return cThrowAssignment; }
		
		//'throw'
		public Keyword getThrowThrowKeyword_0() { return cThrowThrowKeyword_0; }
	}
	public class RaiseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.Raise");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeRaiseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCombinationRaiseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// ***************************
		// * Raise
		// *************************** / Raise:
		//	AttributeRaise | CombinationRaise;
		@Override public ParserRule getRule() { return rule; }
		
		//AttributeRaise | CombinationRaise
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AttributeRaise
		public RuleCall getAttributeRaiseParserRuleCall_0() { return cAttributeRaiseParserRuleCall_0; }
		
		//CombinationRaise
		public RuleCall getCombinationRaiseParserRuleCall_1() { return cCombinationRaiseParserRuleCall_1; }
	}
	public class AttributeRaiseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.AttributeRaise");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributeRaiseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTargetAttributeCrossReference_3_0 = (CrossReference)cTargetAssignment_3.eContents().get(0);
		private final RuleCall cTargetAttributeIDTerminalRuleCall_3_0_1 = (RuleCall)cTargetAttributeCrossReference_3_0.eContents().get(1);
		private final Assignment cTriesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTriesINTTerminalRuleCall_4_0 = (RuleCall)cTriesAssignment_4.eContents().get(0);
		private final Assignment cValueChangeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cValueChangeAttributeRaiseTypeParserRuleCall_5_0 = (RuleCall)cValueChangeAssignment_5.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		/// * Steigerung von Attributen * / AttributeRaise:
		//	'attributeRaise' name=ValidID '('
		//	target=[Attribute] tries=INT?
		//	valueChange=AttributeRaiseType
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'attributeRaise' name=ValidID '(' target=[Attribute] tries=INT? valueChange=AttributeRaiseType ')'
		public Group getGroup() { return cGroup; }
		
		//'attributeRaise'
		public Keyword getAttributeRaiseKeyword_0() { return cAttributeRaiseKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//target=[Attribute]
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }
		
		//[Attribute]
		public CrossReference getTargetAttributeCrossReference_3_0() { return cTargetAttributeCrossReference_3_0; }
		
		//ID
		public RuleCall getTargetAttributeIDTerminalRuleCall_3_0_1() { return cTargetAttributeIDTerminalRuleCall_3_0_1; }
		
		//tries=INT?
		public Assignment getTriesAssignment_4() { return cTriesAssignment_4; }
		
		//INT
		public RuleCall getTriesINTTerminalRuleCall_4_0() { return cTriesINTTerminalRuleCall_4_0; }
		
		//valueChange=AttributeRaiseType
		public Assignment getValueChangeAssignment_5() { return cValueChangeAssignment_5; }
		
		//AttributeRaiseType
		public RuleCall getValueChangeAttributeRaiseTypeParserRuleCall_5_0() { return cValueChangeAttributeRaiseTypeParserRuleCall_5_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class AttributeRaiseTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.AttributeRaiseType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDiceBasedRaiseParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConstantBasedRaiseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		/// * Arten, wie Attribute gesteigert werden können * / AttributeRaiseType:
		//	DiceBasedRaise | ConstantBasedRaise;
		@Override public ParserRule getRule() { return rule; }
		
		//DiceBasedRaise | ConstantBasedRaise
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DiceBasedRaise
		public RuleCall getDiceBasedRaiseParserRuleCall_0() { return cDiceBasedRaiseParserRuleCall_0; }
		
		//ConstantBasedRaise
		public RuleCall getConstantBasedRaiseParserRuleCall_1() { return cConstantBasedRaiseParserRuleCall_1; }
	}
	public class DiceBasedRaiseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.DiceBasedRaise");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDiceRaiseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDiceToUseAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDiceToUseDiceCrossReference_2_0 = (CrossReference)cDiceToUseAssignment_2.eContents().get(0);
		private final RuleCall cDiceToUseDiceIDTerminalRuleCall_2_0_1 = (RuleCall)cDiceToUseDiceCrossReference_2_0.eContents().get(1);
		private final Assignment cResultAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cResultDiceRefParserRuleCall_3_0 = (RuleCall)cResultAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// * Würfelsteigerung * / DiceBasedRaise:
		//	'diceRaise' '('
		//	diceToUse=[Dice] result=DiceRef
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'diceRaise' '(' diceToUse=[Dice] result=DiceRef ')'
		public Group getGroup() { return cGroup; }
		
		//'diceRaise'
		public Keyword getDiceRaiseKeyword_0() { return cDiceRaiseKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//diceToUse=[Dice]
		public Assignment getDiceToUseAssignment_2() { return cDiceToUseAssignment_2; }
		
		//[Dice]
		public CrossReference getDiceToUseDiceCrossReference_2_0() { return cDiceToUseDiceCrossReference_2_0; }
		
		//ID
		public RuleCall getDiceToUseDiceIDTerminalRuleCall_2_0_1() { return cDiceToUseDiceIDTerminalRuleCall_2_0_1; }
		
		//result=DiceRef
		public Assignment getResultAssignment_3() { return cResultAssignment_3; }
		
		//DiceRef
		public RuleCall getResultDiceRefParserRuleCall_3_0() { return cResultDiceRefParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ConstantBasedRaiseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.ConstantBasedRaise");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConstantRaiseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cResultAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cResultINTTerminalRuleCall_2_0 = (RuleCall)cResultAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		/// * Steigerung um einen Wert * / ConstantBasedRaise:
		//	'constantRaise' '('
		//	result=INT
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'constantRaise' '(' result=INT ')'
		public Group getGroup() { return cGroup; }
		
		//'constantRaise'
		public Keyword getConstantRaiseKeyword_0() { return cConstantRaiseKeyword_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//result=INT
		public Assignment getResultAssignment_2() { return cResultAssignment_2; }
		
		//INT
		public RuleCall getResultINTTerminalRuleCall_2_0() { return cResultINTTerminalRuleCall_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class CombinationRaiseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.CombinationRaise");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCombinationRaiseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameValidIDParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActionsCombinationRaiseTypeParserRuleCall_3_0 = (RuleCall)cActionsAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		/// * Steigerung/Änderung von Combinations * / CombinationRaise:
		//	'combinationRaise' name=ValidID '('
		//	actions+=CombinationRaiseType+
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//'combinationRaise' name=ValidID '(' actions+=CombinationRaiseType+ ')'
		public Group getGroup() { return cGroup; }
		
		//'combinationRaise'
		public Keyword getCombinationRaiseKeyword_0() { return cCombinationRaiseKeyword_0; }
		
		//name=ValidID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ValidID
		public RuleCall getNameValidIDParserRuleCall_1_0() { return cNameValidIDParserRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//actions+=CombinationRaiseType+
		public Assignment getActionsAssignment_3() { return cActionsAssignment_3; }
		
		//CombinationRaiseType
		public RuleCall getActionsCombinationRaiseTypeParserRuleCall_3_0() { return cActionsCombinationRaiseTypeParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class CombinationRaiseTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.CombinationRaiseType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAddCombinationParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDeleteCombinationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//CombinationRaiseType:
		//	AddCombination | DeleteCombination;
		@Override public ParserRule getRule() { return rule; }
		
		//AddCombination | DeleteCombination
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AddCombination
		public RuleCall getAddCombinationParserRuleCall_0() { return cAddCombinationParserRuleCall_0; }
		
		//DeleteCombination
		public RuleCall getDeleteCombinationParserRuleCall_1() { return cDeleteCombinationParserRuleCall_1; }
	}
	public class AddCombinationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.AddCombination");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddCombKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAddAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAddCombinationParserRuleCall_1_0 = (RuleCall)cAddAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//AddCombination:
		//	'addComb(' add=Combination ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'addComb(' add=Combination ')'
		public Group getGroup() { return cGroup; }
		
		//'addComb('
		public Keyword getAddCombKeyword_0() { return cAddCombKeyword_0; }
		
		//add=Combination
		public Assignment getAddAssignment_1() { return cAddAssignment_1; }
		
		//Combination
		public RuleCall getAddCombinationParserRuleCall_1_0() { return cAddCombinationParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class DeleteCombinationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.DeleteCombination");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDelCombKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDeleteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeleteCombinationParserRuleCall_1_0 = (RuleCall)cDeleteAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//DeleteCombination:
		//	'delComb(' delete=Combination ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'delComb(' delete=Combination ')'
		public Group getGroup() { return cGroup; }
		
		//'delComb('
		public Keyword getDelCombKeyword_0() { return cDelCombKeyword_0; }
		
		//delete=Combination
		public Assignment getDeleteAssignment_1() { return cDeleteAssignment_1; }
		
		//Combination
		public RuleCall getDeleteCombinationParserRuleCall_1_0() { return cDeleteCombinationParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class DecisionTableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.DecisionTable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDecisionTableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cNumberConditionRowsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cNumberConditionRowsINTTerminalRuleCall_2_1_0 = (RuleCall)cNumberConditionRowsAssignment_2_1.eContents().get(0);
		private final Keyword cCommaKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Assignment cNumberConsequenceRowsAssignment_2_3 = (Assignment)cGroup_2.eContents().get(3);
		private final RuleCall cNumberConsequenceRowsINTTerminalRuleCall_2_3_0 = (RuleCall)cNumberConsequenceRowsAssignment_2_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_4 = (Keyword)cGroup_2.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRowsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRowsRowParserRuleCall_4_0 = (RuleCall)cRowsAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/// ***************************
		// * Decision Table
		// *************************** / // TODO wie verwendet?
		/// * Entscheidungstabelle, nur strukturelle Angabe, alle Logik und Validation in Xtend
		// * Kopfzeile zur Benennung der Spalten, manuelle Entscheidung zur Formatierung ob Condition('-') oder Consequence('|')
		// * Anzahl der Bedingungen und Konsequenzen muss angegeben werden, damit spätere Überprüfbarkeit gegeben ist
		// * Formatierung als richtige Tabelle schwer, liegt nicht im Fokus.
		// * 
		// * / DecisionTable:
		//	'decisionTable' name=ID ('(' numberConditionRows=INT ',' numberConsequenceRows=INT ')')?
		//	'['
		//	//	headerRow=HeaderRow
		//	rows+=Row*
		//	']';
		@Override public ParserRule getRule() { return rule; }
		
		//'decisionTable' name=ID ('(' numberConditionRows=INT ',' numberConsequenceRows=INT ')')? '[' //	headerRow=HeaderRow
		//rows+=Row* ']'
		public Group getGroup() { return cGroup; }
		
		//'decisionTable'
		public Keyword getDecisionTableKeyword_0() { return cDecisionTableKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//('(' numberConditionRows=INT ',' numberConsequenceRows=INT ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//numberConditionRows=INT
		public Assignment getNumberConditionRowsAssignment_2_1() { return cNumberConditionRowsAssignment_2_1; }
		
		//INT
		public RuleCall getNumberConditionRowsINTTerminalRuleCall_2_1_0() { return cNumberConditionRowsINTTerminalRuleCall_2_1_0; }
		
		//','
		public Keyword getCommaKeyword_2_2() { return cCommaKeyword_2_2; }
		
		//numberConsequenceRows=INT
		public Assignment getNumberConsequenceRowsAssignment_2_3() { return cNumberConsequenceRowsAssignment_2_3; }
		
		//INT
		public RuleCall getNumberConsequenceRowsINTTerminalRuleCall_2_3_0() { return cNumberConsequenceRowsINTTerminalRuleCall_2_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_4() { return cRightParenthesisKeyword_2_4; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_3() { return cLeftSquareBracketKeyword_3; }
		
		////	headerRow=HeaderRow
		//rows+=Row*
		public Assignment getRowsAssignment_4() { return cRowsAssignment_4; }
		
		//Row
		public RuleCall getRowsRowParserRuleCall_4_0() { return cRowsRowParserRuleCall_4_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }
	}
	public class DecisionTableRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.DecisionTableRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDecisionTableAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cDecisionTableDecisionTableCrossReference_0_0 = (CrossReference)cDecisionTableAssignment_0.eContents().get(0);
		private final RuleCall cDecisionTableDecisionTableIDTerminalRuleCall_0_0_1 = (RuleCall)cDecisionTableDecisionTableCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPartDecisionTablePartEnumRuleCall_2_0 = (RuleCall)cPartAssignment_2.eContents().get(0);
		
		//DecisionTableRef:
		//	decisionTable=[DecisionTable] '.' part=DecisionTablePart;
		@Override public ParserRule getRule() { return rule; }
		
		//decisionTable=[DecisionTable] '.' part=DecisionTablePart
		public Group getGroup() { return cGroup; }
		
		//decisionTable=[DecisionTable]
		public Assignment getDecisionTableAssignment_0() { return cDecisionTableAssignment_0; }
		
		//[DecisionTable]
		public CrossReference getDecisionTableDecisionTableCrossReference_0_0() { return cDecisionTableDecisionTableCrossReference_0_0; }
		
		//ID
		public RuleCall getDecisionTableDecisionTableIDTerminalRuleCall_0_0_1() { return cDecisionTableDecisionTableIDTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//part=DecisionTablePart
		public Assignment getPartAssignment_2() { return cPartAssignment_2; }
		
		//DecisionTablePart
		public RuleCall getPartDecisionTablePartEnumRuleCall_2_0() { return cPartDecisionTablePartEnumRuleCall_2_0; }
	}
	public class RowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.Row");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIndexAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIndexINTTerminalRuleCall_1_0 = (RuleCall)cIndexAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cConditionsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cConditionsConditionParserRuleCall_3_0 = (RuleCall)cConditionsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cHyphenMinusKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cConditionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cConditionsConditionParserRuleCall_4_1_0 = (RuleCall)cConditionsAssignment_4_1.eContents().get(0);
		private final Assignment cConsequencesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cConsequencesConsequenceParserRuleCall_5_0 = (RuleCall)cConsequencesAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cVerticalLineKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cConsequencesAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cConsequencesConsequenceParserRuleCall_6_1_0 = (RuleCall)cConsequencesAssignment_6_1.eContents().get(0);
		
		////HeaderRow:
		////	headerLabels+=ValidID (('--' headerLabels+=ValidID) | ('||' headerLabels+=ValidID))*
		////;
		//Row:
		//	'i=' index=INT ':'
		//	conditions+=Condition ('-' conditions+=Condition)*
		//	consequences+=Consequence ('|' consequences+=Consequence)*;
		@Override public ParserRule getRule() { return rule; }
		
		//'i=' index=INT ':' conditions+=Condition ('-' conditions+=Condition)* consequences+=Consequence ('|'
		//consequences+=Consequence)*
		public Group getGroup() { return cGroup; }
		
		//'i='
		public Keyword getIKeyword_0() { return cIKeyword_0; }
		
		//index=INT
		public Assignment getIndexAssignment_1() { return cIndexAssignment_1; }
		
		//INT
		public RuleCall getIndexINTTerminalRuleCall_1_0() { return cIndexINTTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//conditions+=Condition
		public Assignment getConditionsAssignment_3() { return cConditionsAssignment_3; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_3_0() { return cConditionsConditionParserRuleCall_3_0; }
		
		//('-' conditions+=Condition)*
		public Group getGroup_4() { return cGroup_4; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_4_0() { return cHyphenMinusKeyword_4_0; }
		
		//conditions+=Condition
		public Assignment getConditionsAssignment_4_1() { return cConditionsAssignment_4_1; }
		
		//Condition
		public RuleCall getConditionsConditionParserRuleCall_4_1_0() { return cConditionsConditionParserRuleCall_4_1_0; }
		
		//consequences+=Consequence
		public Assignment getConsequencesAssignment_5() { return cConsequencesAssignment_5; }
		
		//Consequence
		public RuleCall getConsequencesConsequenceParserRuleCall_5_0() { return cConsequencesConsequenceParserRuleCall_5_0; }
		
		//('|' consequences+=Consequence)*
		public Group getGroup_6() { return cGroup_6; }
		
		//'|'
		public Keyword getVerticalLineKeyword_6_0() { return cVerticalLineKeyword_6_0; }
		
		//consequences+=Consequence
		public Assignment getConsequencesAssignment_6_1() { return cConsequencesAssignment_6_1; }
		
		//Consequence
		public RuleCall getConsequencesConsequenceParserRuleCall_6_1_0() { return cConsequencesConsequenceParserRuleCall_6_1_0; }
	}
	public class RowRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.RowRef");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRowAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cRowRowCrossReference_0_0 = (CrossReference)cRowAssignment_0.eContents().get(0);
		private final RuleCall cRowRowIDTerminalRuleCall_0_0_1 = (RuleCall)cRowRowCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cPartAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cPartRowPartEnumRuleCall_2_0 = (RuleCall)cPartAssignment_2.eContents().get(0);
		
		//RowRef:
		//	row=[Row] '.' part=RowPart;
		@Override public ParserRule getRule() { return rule; }
		
		//row=[Row] '.' part=RowPart
		public Group getGroup() { return cGroup; }
		
		//row=[Row]
		public Assignment getRowAssignment_0() { return cRowAssignment_0; }
		
		//[Row]
		public CrossReference getRowRowCrossReference_0_0() { return cRowRowCrossReference_0_0; }
		
		//ID
		public RuleCall getRowRowIDTerminalRuleCall_0_0_1() { return cRowRowIDTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//part=RowPart
		public Assignment getPartAssignment_2() { return cPartAssignment_2; }
		
		//RowPart
		public RuleCall getPartRowPartEnumRuleCall_2_0() { return cPartRowPartEnumRuleCall_2_0; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCondNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCondNameValidIDParserRuleCall_0_0 = (RuleCall)cCondNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionConditionTargetsParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Assignment cOpAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOpRelOpToParserRuleCall_3_0 = (RuleCall)cOpAssignment_3.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		/// * überprüfbare boolische Bedingung bezogen auf numerischen Wert , derzeit nur 2wertig angedacht, 3wertig kann sicher ergänzt werden* /
		//Condition:
		//	condName=ValidID '('
		//	expression=ConditionTargets op=RelOpTo INT
		//	')';
		@Override public ParserRule getRule() { return rule; }
		
		//condName=ValidID '(' expression=ConditionTargets op=RelOpTo INT ')'
		public Group getGroup() { return cGroup; }
		
		//condName=ValidID
		public Assignment getCondNameAssignment_0() { return cCondNameAssignment_0; }
		
		//ValidID
		public RuleCall getCondNameValidIDParserRuleCall_0_0() { return cCondNameValidIDParserRuleCall_0_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//expression=ConditionTargets
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//ConditionTargets
		public RuleCall getExpressionConditionTargetsParserRuleCall_2_0() { return cExpressionConditionTargetsParserRuleCall_2_0; }
		
		//op=RelOpTo
		public Assignment getOpAssignment_3() { return cOpAssignment_3; }
		
		//RelOpTo
		public RuleCall getOpRelOpToParserRuleCall_3_0() { return cOpRelOpToParserRuleCall_3_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4() { return cINTTerminalRuleCall_4; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class RelOpToElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.RelOpTo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cExclamationMarkEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLessThanSignKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cGreaterThanSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cEqualsSignKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		
		//RelOpTo:
		//	'=' | '<' | '>' | '!=' | '<' '=' | '>' '=';
		@Override public ParserRule getRule() { return rule; }
		
		//'=' | '<' | '>' | '!=' | '<' '=' | '>' '='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_1() { return cLessThanSignKeyword_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_2() { return cGreaterThanSignKeyword_2; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_3() { return cExclamationMarkEqualsSignKeyword_3; }
		
		//'<' '='
		public Group getGroup_4() { return cGroup_4; }
		
		//'<'
		public Keyword getLessThanSignKeyword_4_0() { return cLessThanSignKeyword_4_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_4_1() { return cEqualsSignKeyword_4_1; }
		
		//'>' '='
		public Group getGroup_5() { return cGroup_5; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_5_0() { return cGreaterThanSignKeyword_5_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_5_1() { return cEqualsSignKeyword_5_1; }
	}
	public class ConditionTargetsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.ConditionTargets");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAttributeRefParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCombinedAttributeRefParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCombinationRefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		/// * Referenzen zu Attributen und Kombinationen, die in den Conditions verwendet werden können. * / / * Conditions können CombiniedAttributes enthalten. Es soll abgefragt werden können. 
		// * CombiniedAttr können allerdings kein direktes Ziel darstellen, da sie berechnet werden.
		// * / ConditionTargets:
		//	AttributeRef | CombinedAttributeRef | CombinationRef;
		@Override public ParserRule getRule() { return rule; }
		
		//AttributeRef | CombinedAttributeRef | CombinationRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AttributeRef
		public RuleCall getAttributeRefParserRuleCall_0() { return cAttributeRefParserRuleCall_0; }
		
		//CombinedAttributeRef
		public RuleCall getCombinedAttributeRefParserRuleCall_1() { return cCombinedAttributeRefParserRuleCall_1; }
		
		//CombinationRef
		public RuleCall getCombinationRefParserRuleCall_2() { return cCombinationRefParserRuleCall_2; }
	}
	public class ConsequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.Consequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTargetConsequenceRefEnumRuleCall_0_0 = (RuleCall)cTargetAssignment_0.eContents().get(0);
		private final Assignment cEffectAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cEffectRaiseCrossReference_1_0 = (CrossReference)cEffectAssignment_1.eContents().get(0);
		private final RuleCall cEffectRaiseIDTerminalRuleCall_1_0_1 = (RuleCall)cEffectRaiseCrossReference_1_0.eContents().get(1);
		
		/// * Auswirkungen wenn die Bedingungen erfüllt werden, bisher nur auf zwei mögliche Ziele ausgerichtet, Attr+Combination * /
		//Consequence:
		//	target=ConsequenceRef
		//	effect=[Raise];
		@Override public ParserRule getRule() { return rule; }
		
		//target=ConsequenceRef effect=[Raise]
		public Group getGroup() { return cGroup; }
		
		//target=ConsequenceRef
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }
		
		//ConsequenceRef
		public RuleCall getTargetConsequenceRefEnumRuleCall_0_0() { return cTargetConsequenceRefEnumRuleCall_0_0; }
		
		//effect=[Raise]
		public Assignment getEffectAssignment_1() { return cEffectAssignment_1; }
		
		//[Raise]
		public CrossReference getEffectRaiseCrossReference_1_0() { return cEffectRaiseCrossReference_1_0; }
		
		//ID
		public RuleCall getEffectRaiseIDTerminalRuleCall_1_0_1() { return cEffectRaiseIDTerminalRuleCall_1_0_1; }
	}
	
	public class AttributePartElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.AttributePart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAttrNameEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAttrNameAttrNameKeyword_0_0 = (Keyword)cAttrNameEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cAttrValueEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cAttrValueAttrValueKeyword_1_0 = (Keyword)cAttrValueEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cAttrMinValueEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cAttrMinValueAttrMinValueKeyword_2_0 = (Keyword)cAttrMinValueEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cAttrMaxValueEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cAttrMaxValueAttrMaxValueKeyword_3_0 = (Keyword)cAttrMaxValueEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum AttributePart:
		//	attrName | attrValue | attrMinValue | attrMaxValue;
		public EnumRule getRule() { return rule; }
		
		//attrName | attrValue | attrMinValue | attrMaxValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//attrName
		public EnumLiteralDeclaration getAttrNameEnumLiteralDeclaration_0() { return cAttrNameEnumLiteralDeclaration_0; }
		
		//"attrName"
		public Keyword getAttrNameAttrNameKeyword_0_0() { return cAttrNameAttrNameKeyword_0_0; }
		
		//attrValue
		public EnumLiteralDeclaration getAttrValueEnumLiteralDeclaration_1() { return cAttrValueEnumLiteralDeclaration_1; }
		
		//"attrValue"
		public Keyword getAttrValueAttrValueKeyword_1_0() { return cAttrValueAttrValueKeyword_1_0; }
		
		//attrMinValue
		public EnumLiteralDeclaration getAttrMinValueEnumLiteralDeclaration_2() { return cAttrMinValueEnumLiteralDeclaration_2; }
		
		//"attrMinValue"
		public Keyword getAttrMinValueAttrMinValueKeyword_2_0() { return cAttrMinValueAttrMinValueKeyword_2_0; }
		
		//attrMaxValue
		public EnumLiteralDeclaration getAttrMaxValueEnumLiteralDeclaration_3() { return cAttrMaxValueEnumLiteralDeclaration_3; }
		
		//"attrMaxValue"
		public Keyword getAttrMaxValueAttrMaxValueKeyword_3_0() { return cAttrMaxValueAttrMaxValueKeyword_3_0; }
	}
	public class CombinedAttributePartElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.CombinedAttributePart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCombAttrNameEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCombAttrNameCombAttrNameKeyword_0_0 = (Keyword)cCombAttrNameEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCombAttrValueEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCombAttrValueCombAttrValueKeyword_1_0 = (Keyword)cCombAttrValueEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCombAttrMinValueEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCombAttrMinValueCombAttrMinValueKeyword_2_0 = (Keyword)cCombAttrMinValueEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCombAttrMaxValueEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCombAttrMaxValueCombAttrMaxValueKeyword_3_0 = (Keyword)cCombAttrMaxValueEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum CombinedAttributePart:
		//	combAttrName | combAttrValue | combAttrMinValue | combAttrMaxValue;
		public EnumRule getRule() { return rule; }
		
		//combAttrName | combAttrValue | combAttrMinValue | combAttrMaxValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//combAttrName
		public EnumLiteralDeclaration getCombAttrNameEnumLiteralDeclaration_0() { return cCombAttrNameEnumLiteralDeclaration_0; }
		
		//"combAttrName"
		public Keyword getCombAttrNameCombAttrNameKeyword_0_0() { return cCombAttrNameCombAttrNameKeyword_0_0; }
		
		//combAttrValue
		public EnumLiteralDeclaration getCombAttrValueEnumLiteralDeclaration_1() { return cCombAttrValueEnumLiteralDeclaration_1; }
		
		//"combAttrValue"
		public Keyword getCombAttrValueCombAttrValueKeyword_1_0() { return cCombAttrValueCombAttrValueKeyword_1_0; }
		
		//combAttrMinValue
		public EnumLiteralDeclaration getCombAttrMinValueEnumLiteralDeclaration_2() { return cCombAttrMinValueEnumLiteralDeclaration_2; }
		
		//"combAttrMinValue"
		public Keyword getCombAttrMinValueCombAttrMinValueKeyword_2_0() { return cCombAttrMinValueCombAttrMinValueKeyword_2_0; }
		
		//combAttrMaxValue
		public EnumLiteralDeclaration getCombAttrMaxValueEnumLiteralDeclaration_3() { return cCombAttrMaxValueEnumLiteralDeclaration_3; }
		
		//"combAttrMaxValue"
		public Keyword getCombAttrMaxValueCombAttrMaxValueKeyword_3_0() { return cCombAttrMaxValueCombAttrMaxValueKeyword_3_0; }
	}
	public class CombinationPartElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.CombinationPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCombinationNameEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCombinationNameCombinationNameKeyword_0_0 = (Keyword)cCombinationNameEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCombinationConditionsEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCombinationConditionsCombinationConditionsKeyword_1_0 = (Keyword)cCombinationConditionsEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum CombinationPart:
		//	combinationName | combinationConditions
		//	//	TODO Kombinationsvariblen ergänzen
		//;
		public EnumRule getRule() { return rule; }
		
		//combinationName | combinationConditions
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//combinationName
		public EnumLiteralDeclaration getCombinationNameEnumLiteralDeclaration_0() { return cCombinationNameEnumLiteralDeclaration_0; }
		
		//"combinationName"
		public Keyword getCombinationNameCombinationNameKeyword_0_0() { return cCombinationNameCombinationNameKeyword_0_0; }
		
		//combinationConditions
		public EnumLiteralDeclaration getCombinationConditionsEnumLiteralDeclaration_1() { return cCombinationConditionsEnumLiteralDeclaration_1; }
		
		//"combinationConditions"
		public Keyword getCombinationConditionsCombinationConditionsKeyword_1_0() { return cCombinationConditionsCombinationConditionsKeyword_1_0; }
	}
	public class DecisionTablePartElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.DecisionTablePart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cRowEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRowRowKeyword_0_0 = (Keyword)cRowEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNumberConditionRowsEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNumberConditionRowsNumberConditionRowsKeyword_1_0 = (Keyword)cNumberConditionRowsEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNumberConsequenceRowsEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNumberConsequenceRowsNumberConsequenceRowsKeyword_2_0 = (Keyword)cNumberConsequenceRowsEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNameEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNameNameKeyword_3_0 = (Keyword)cNameEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cRowRefEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cRowRefRowRefKeyword_4_0 = (Keyword)cRowRefEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum DecisionTablePart:
		//	row | numberConditionRows | numberConsequenceRows | name | RowRef;
		public EnumRule getRule() { return rule; }
		
		//row | numberConditionRows | numberConsequenceRows | name | RowRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//row
		public EnumLiteralDeclaration getRowEnumLiteralDeclaration_0() { return cRowEnumLiteralDeclaration_0; }
		
		//"row"
		public Keyword getRowRowKeyword_0_0() { return cRowRowKeyword_0_0; }
		
		//numberConditionRows
		public EnumLiteralDeclaration getNumberConditionRowsEnumLiteralDeclaration_1() { return cNumberConditionRowsEnumLiteralDeclaration_1; }
		
		//"numberConditionRows"
		public Keyword getNumberConditionRowsNumberConditionRowsKeyword_1_0() { return cNumberConditionRowsNumberConditionRowsKeyword_1_0; }
		
		//numberConsequenceRows
		public EnumLiteralDeclaration getNumberConsequenceRowsEnumLiteralDeclaration_2() { return cNumberConsequenceRowsEnumLiteralDeclaration_2; }
		
		//"numberConsequenceRows"
		public Keyword getNumberConsequenceRowsNumberConsequenceRowsKeyword_2_0() { return cNumberConsequenceRowsNumberConsequenceRowsKeyword_2_0; }
		
		//name
		public EnumLiteralDeclaration getNameEnumLiteralDeclaration_3() { return cNameEnumLiteralDeclaration_3; }
		
		//"name"
		public Keyword getNameNameKeyword_3_0() { return cNameNameKeyword_3_0; }
		
		//RowRef
		public EnumLiteralDeclaration getRowRefEnumLiteralDeclaration_4() { return cRowRefEnumLiteralDeclaration_4; }
		
		//"RowRef"
		public Keyword getRowRefRowRefKeyword_4_0() { return cRowRefRowRefKeyword_4_0; }
	}
	public class RowPartElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.RowPart");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIndexEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIndexIndexKeyword_0_0 = (Keyword)cIndexEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cConditionsEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cConditionsConditionsKeyword_1_0 = (Keyword)cConditionsEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cConsequencesEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cConsequencesConsequencesKeyword_2_0 = (Keyword)cConsequencesEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum RowPart:
		//	index | conditions | consequences;
		public EnumRule getRule() { return rule; }
		
		//index | conditions | consequences
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//index
		public EnumLiteralDeclaration getIndexEnumLiteralDeclaration_0() { return cIndexEnumLiteralDeclaration_0; }
		
		//"index"
		public Keyword getIndexIndexKeyword_0_0() { return cIndexIndexKeyword_0_0; }
		
		//conditions
		public EnumLiteralDeclaration getConditionsEnumLiteralDeclaration_1() { return cConditionsEnumLiteralDeclaration_1; }
		
		//"conditions"
		public Keyword getConditionsConditionsKeyword_1_0() { return cConditionsConditionsKeyword_1_0; }
		
		//consequences
		public EnumLiteralDeclaration getConsequencesEnumLiteralDeclaration_2() { return cConsequencesEnumLiteralDeclaration_2; }
		
		//"consequences"
		public Keyword getConsequencesConsequencesKeyword_2_0() { return cConsequencesConsequencesKeyword_2_0; }
	}
	public class ConsequenceRefElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.wilkenk.ba.Create.ConsequenceRef");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAttributeRefEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAttributeRefAttributeRefKeyword_0_0 = (Keyword)cAttributeRefEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCombinationRefEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCombinationRefCombinationRefKeyword_1_0 = (Keyword)cCombinationRefEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum ConsequenceRef:
		//	AttributeRef | CombinationRef;
		public EnumRule getRule() { return rule; }
		
		//AttributeRef | CombinationRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AttributeRef
		public EnumLiteralDeclaration getAttributeRefEnumLiteralDeclaration_0() { return cAttributeRefEnumLiteralDeclaration_0; }
		
		//"AttributeRef"
		public Keyword getAttributeRefAttributeRefKeyword_0_0() { return cAttributeRefAttributeRefKeyword_0_0; }
		
		//CombinationRef
		public EnumLiteralDeclaration getCombinationRefEnumLiteralDeclaration_1() { return cCombinationRefEnumLiteralDeclaration_1; }
		
		//"CombinationRef"
		public Keyword getCombinationRefCombinationRefKeyword_1_0() { return cCombinationRefCombinationRefKeyword_1_0; }
	}
	
	private final DomainmodelElements pDomainmodel;
	private final EntityElements pEntity;
	private final CharacterElements pCharacter;
	private final PropertyElements pProperty;
	private final AttributeElements pAttribute;
	private final AttributeRefElements pAttributeRef;
	private final AttributePartElements eAttributePart;
	private final InitialAttributeDecisionElements pInitialAttributeDecision;
	private final InitAttributeElements pInitAttribute;
	private final CategoryElements pCategory;
	private final CombinedAttributeElements pCombinedAttribute;
	private final CombinedAttributeRefElements pCombinedAttributeRef;
	private final CombinedAttributePartElements eCombinedAttributePart;
	private final MathExpressionElements pMathExpression;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final PrimaryElements pPrimary;
	private final IntRefElements pIntRef;
	private final CombinationElements pCombination;
	private final CombinationRefElements pCombinationRef;
	private final CombinationPartElements eCombinationPart;
	private final CombinationConditionElements pCombinationCondition;
	private final DiceElements pDice;
	private final DiceRefElements pDiceRef;
	private final DicePartElements pDicePart;
	private final RaiseElements pRaise;
	private final AttributeRaiseElements pAttributeRaise;
	private final AttributeRaiseTypeElements pAttributeRaiseType;
	private final DiceBasedRaiseElements pDiceBasedRaise;
	private final ConstantBasedRaiseElements pConstantBasedRaise;
	private final CombinationRaiseElements pCombinationRaise;
	private final CombinationRaiseTypeElements pCombinationRaiseType;
	private final AddCombinationElements pAddCombination;
	private final DeleteCombinationElements pDeleteCombination;
	private final DecisionTableElements pDecisionTable;
	private final DecisionTablePartElements eDecisionTablePart;
	private final DecisionTableRefElements pDecisionTableRef;
	private final RowElements pRow;
	private final RowPartElements eRowPart;
	private final RowRefElements pRowRef;
	private final ConditionElements pCondition;
	private final RelOpToElements pRelOpTo;
	private final ConditionTargetsElements pConditionTargets;
	private final ConsequenceElements pConsequence;
	private final ConsequenceRefElements eConsequenceRef;
	
	private final Grammar grammar;
	
	private final XbaseGrammarAccess gaXbase;
	
	private final XtypeGrammarAccess gaXtype;

	@Inject
	public CreateGrammarAccess(GrammarProvider grammarProvider,
			XbaseGrammarAccess gaXbase,
			XtypeGrammarAccess gaXtype) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
		this.gaXtype = gaXtype;
		this.pDomainmodel = new DomainmodelElements();
		this.pEntity = new EntityElements();
		this.pCharacter = new CharacterElements();
		this.pProperty = new PropertyElements();
		this.pAttribute = new AttributeElements();
		this.pAttributeRef = new AttributeRefElements();
		this.eAttributePart = new AttributePartElements();
		this.pInitialAttributeDecision = new InitialAttributeDecisionElements();
		this.pInitAttribute = new InitAttributeElements();
		this.pCategory = new CategoryElements();
		this.pCombinedAttribute = new CombinedAttributeElements();
		this.pCombinedAttributeRef = new CombinedAttributeRefElements();
		this.eCombinedAttributePart = new CombinedAttributePartElements();
		this.pMathExpression = new MathExpressionElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pPrimary = new PrimaryElements();
		this.pIntRef = new IntRefElements();
		this.pCombination = new CombinationElements();
		this.pCombinationRef = new CombinationRefElements();
		this.eCombinationPart = new CombinationPartElements();
		this.pCombinationCondition = new CombinationConditionElements();
		this.pDice = new DiceElements();
		this.pDiceRef = new DiceRefElements();
		this.pDicePart = new DicePartElements();
		this.pRaise = new RaiseElements();
		this.pAttributeRaise = new AttributeRaiseElements();
		this.pAttributeRaiseType = new AttributeRaiseTypeElements();
		this.pDiceBasedRaise = new DiceBasedRaiseElements();
		this.pConstantBasedRaise = new ConstantBasedRaiseElements();
		this.pCombinationRaise = new CombinationRaiseElements();
		this.pCombinationRaiseType = new CombinationRaiseTypeElements();
		this.pAddCombination = new AddCombinationElements();
		this.pDeleteCombination = new DeleteCombinationElements();
		this.pDecisionTable = new DecisionTableElements();
		this.eDecisionTablePart = new DecisionTablePartElements();
		this.pDecisionTableRef = new DecisionTableRefElements();
		this.pRow = new RowElements();
		this.eRowPart = new RowPartElements();
		this.pRowRef = new RowRefElements();
		this.pCondition = new ConditionElements();
		this.pRelOpTo = new RelOpToElements();
		this.pConditionTargets = new ConditionTargetsElements();
		this.pConsequence = new ConsequenceElements();
		this.eConsequenceRef = new ConsequenceRefElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.wilkenk.ba.Create".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}
	
	public XtypeGrammarAccess getXtypeGrammarAccess() {
		return gaXtype;
	}

	
	/// * root für die Grammatik.
	// * "game" als Sammelpunkt für alle auftretenden Aspekte der Charaktererstellung,
	// * da einige Aspekte nicht nur Einfluss auf die Charaktererstellung haben, sondern in der "Welt" verwurzelt sind.
	// * / Domainmodel: //	importSection=XImportSection?
	//	'game' name=QualifiedName '(' elements+=Entity* ')';
	public DomainmodelElements getDomainmodelAccess() {
		return pDomainmodel;
	}
	
	public ParserRule getDomainmodelRule() {
		return getDomainmodelAccess().getRule();
	}
	
	/// * mögliche Aspekte des Spiels * / Entity:
	//	Character | Combination | Attribute | CombinedAttribute | Dice | Raise | Category | DecisionTable;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	/// * Charakterbeschreibung * / Character:
	//	'character' name=QualifiedName '('
	//	properties+=Property*
	//	//		(operations += Operation)*
	//	')';
	public CharacterElements getCharacterAccess() {
		return pCharacter;
	}
	
	public ParserRule getCharacterRule() {
		return getCharacterAccess().getRule();
	}
	
	/// * Eigenschaften des Charakters. Beschreibende und Werteigenschaften * / Property:
	//	'attribute:' attrValue=[Attribute] |
	//	'combinedAttribute:' combAttrValue=[CombinedAttribute] |
	//	'combination:' combValue=[Combination];
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	/// * Möglichkeit eigene Methoden zu 'bauen' zur Erweiterung der Charaktermöglichkeiten, eventuell weg? (nice to have) * / //Operation:
	////    'op' name = ValidID 
	////		'('(params+=FullJvmFormalParameter (',' params+=FullJvmFormalParameter)*)?')' ':' type=JvmTypeReference 
	////			body=XBlockExpression
	////;
	/// ***************************
	// * Attribute 
	// *************************** / / * kann rein textuelle Beschreibung sein, 
	// * kann Werte bekommen
	// * / Attribute:
	//	'attribute' name=QualifiedName '(' ('value:' (intValue=INT | stringValue=STRING))? ('initialValue:'
	//	initialValue=InitialAttributeDecision)? ('type:' valueType=('Integer' | 'String'))? ('range[' minValue=INT ','
	//	maxValue=INT ']')? ('category:' category=[Category])? ('description:' description=STRING)?
	//	')';
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	/// * Regel um Attribut Variablen in Grammatik zu referenzieren. * / AttributeRef:
	//	attribute=[Attribute] '.' part=AttributePart;
	public AttributeRefElements getAttributeRefAccess() {
		return pAttributeRef;
	}
	
	public ParserRule getAttributeRefRule() {
		return getAttributeRefAccess().getRule();
	}
	
	//enum AttributePart:
	//	attrName | attrValue | attrMinValue | attrMaxValue;
	public AttributePartElements getAttributePartAccess() {
		return eAttributePart;
	}
	
	public EnumRule getAttributePartRule() {
		return getAttributePartAccess().getRule();
	}
	
	/// * Initialwert Beschreibung für Attribute * / InitialAttributeDecision:
	//	type=InitAttribute;
	public InitialAttributeDecisionElements getInitialAttributeDecisionAccess() {
		return pInitialAttributeDecision;
	}
	
	public ParserRule getInitialAttributeDecisionRule() {
		return getInitialAttributeDecisionAccess().getRule();
	}
	
	/// * Initialwert kann Zahl oder Würfelergebnis sein * / InitAttribute:
	//	'value:' initValue=INT | 'dice(' diceEvent=MathExpression ')';
	public InitAttributeElements getInitAttributeAccess() {
		return pInitAttribute;
	}
	
	public ParserRule getInitAttributeRule() {
		return getInitAttributeAccess().getRule();
	}
	
	/// * angedacht zur Kategorisierung von Eigenschaften * / Category:
	//	'category' name=STRING;
	public CategoryElements getCategoryAccess() {
		return pCategory;
	}
	
	public ParserRule getCategoryRule() {
		return getCategoryAccess().getRule();
	}
	
	/// * kombiniertes Attribut, Wert setzt sich aus mehreren Attributen zusammen (berechneter Wert)
	// * Daher Unterschied zu Attribute
	// * / CombinedAttribute:
	//	'combinedAttribute' name=QualifiedName '('
	//	'range[' minValue=INT ',' maxValue=INT ']'
	//	combValue=MathExpression ('category:' category=[Category])? ('description:' description=STRING)?
	//	')';
	public CombinedAttributeElements getCombinedAttributeAccess() {
		return pCombinedAttribute;
	}
	
	public ParserRule getCombinedAttributeRule() {
		return getCombinedAttributeAccess().getRule();
	}
	
	/// * Regel um CombinedAttribut Variablen in Grammatik zu referenzieren. * / CombinedAttributeRef:
	//	combinedAttribute=[CombinedAttribute] '.' part=CombinedAttributePart;
	public CombinedAttributeRefElements getCombinedAttributeRefAccess() {
		return pCombinedAttributeRef;
	}
	
	public ParserRule getCombinedAttributeRefRule() {
		return getCombinedAttributeRefAccess().getRule();
	}
	
	//enum CombinedAttributePart:
	//	combAttrName | combAttrValue | combAttrMinValue | combAttrMaxValue;
	public CombinedAttributePartElements getCombinedAttributePartAccess() {
		return eCombinedAttributePart;
	}
	
	public EnumRule getCombinedAttributePartRule() {
		return getCombinedAttributePartAccess().getRule();
	}
	
	/// ***************************
	// * Attribute Expression
	// *************************** / / * Mathematische Kombination von Attributen für "CombinatedAttributes" * / MathExpression:
	//	Addition;
	public MathExpressionElements getMathExpressionAccess() {
		return pMathExpression;
	}
	
	public ParserRule getMathExpressionRule() {
		return getMathExpressionAccess().getRule();
	}
	
	/// * Add & Sub * / Addition MathExpression:
	//	Multiplication ({Addition.left=current} op=('+' | '-') right=Multiplication)*
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	/// * Mult & Div * / Multiplication MathExpression:
	//	Primary ({Multiplication.left=current} op=('*' | '/') right=Primary)*
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//Primary MathExpression:
	//	IntRef | AttributeRef | DiceRef |
	//	'(' Addition ')'
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//IntRef:
	//	intVal=INT;
	public IntRefElements getIntRefAccess() {
		return pIntRef;
	}
	
	public ParserRule getIntRefRule() {
		return getIntRefAccess().getRule();
	}
	
	/// ***************************
	// * Combination
	// *************************** / / * Combination 'sollen' mehrere Gruppierungsmöglichkeiten wiederspiegeln.
	// * Berufe, Auswirkungen auf mehrere Eigenschaften, Beschreibung umfassenderer "Zusammenstellungen"
	// * / Combination:
	//	'combination' name=ID '('
	//	conditions+=CombinationCondition*
	//	')'
	//	raise=[Raise];
	public CombinationElements getCombinationAccess() {
		return pCombination;
	}
	
	public ParserRule getCombinationRule() {
		return getCombinationAccess().getRule();
	}
	
	/// * Regel um Kombinationen Variablen in Grammatik zu referenzieren. * / CombinationRef:
	//	combination=[Combination] '.' part=CombinationPart;
	public CombinationRefElements getCombinationRefAccess() {
		return pCombinationRef;
	}
	
	public ParserRule getCombinationRefRule() {
		return getCombinationRefAccess().getRule();
	}
	
	//enum CombinationPart:
	//	combinationName | combinationConditions
	//	//	TODO Kombinationsvariblen ergänzen
	//;
	public CombinationPartElements getCombinationPartAccess() {
		return eCombinationPart;
	}
	
	public EnumRule getCombinationPartRule() {
		return getCombinationPartAccess().getRule();
	}
	
	/// * Vorbedingungen, damit Kombinationen erfüllt oder erhalten werden können. * / CombinationCondition:
	//	'combinationCondition' name=ID '('
	//	//TODO condition logic - reicht das so?
	//	condition=XExpression
	//	')';
	public CombinationConditionElements getCombinationConditionAccess() {
		return pCombinationCondition;
	}
	
	public ParserRule getCombinationConditionRule() {
		return getCombinationConditionAccess().getRule();
	}
	
	/// ***************************
	// * Dice
	// *************************** / / * Würfel halt * / Dice:
	//	'dice' name=ID '('
	//	maxValue=INT
	//	')';
	public DiceElements getDiceAccess() {
		return pDice;
	}
	
	public ParserRule getDiceRule() {
		return getDiceAccess().getRule();
	}
	
	/// * Regel um Dice Variablen in Grammatik zu referenzieren. * / DiceRef:
	//	dice=[Dice] '.' part=DicePart;
	public DiceRefElements getDiceRefAccess() {
		return pDiceRef;
	}
	
	public ParserRule getDiceRefRule() {
		return getDiceRefAccess().getRule();
	}
	
	/// * Liste der möglichen Variablen, 
	// * muss bei Veränderung von Dice angepasst/ergänzt werden
	// * / DicePart:
	//	throw='throw';
	public DicePartElements getDicePartAccess() {
		return pDicePart;
	}
	
	public ParserRule getDicePartRule() {
		return getDicePartAccess().getRule();
	}
	
	/// ***************************
	// * Raise
	// *************************** / Raise:
	//	AttributeRaise | CombinationRaise;
	public RaiseElements getRaiseAccess() {
		return pRaise;
	}
	
	public ParserRule getRaiseRule() {
		return getRaiseAccess().getRule();
	}
	
	/// * Steigerung von Attributen * / AttributeRaise:
	//	'attributeRaise' name=ValidID '('
	//	target=[Attribute] tries=INT?
	//	valueChange=AttributeRaiseType
	//	')';
	public AttributeRaiseElements getAttributeRaiseAccess() {
		return pAttributeRaise;
	}
	
	public ParserRule getAttributeRaiseRule() {
		return getAttributeRaiseAccess().getRule();
	}
	
	/// * Arten, wie Attribute gesteigert werden können * / AttributeRaiseType:
	//	DiceBasedRaise | ConstantBasedRaise;
	public AttributeRaiseTypeElements getAttributeRaiseTypeAccess() {
		return pAttributeRaiseType;
	}
	
	public ParserRule getAttributeRaiseTypeRule() {
		return getAttributeRaiseTypeAccess().getRule();
	}
	
	/// * Würfelsteigerung * / DiceBasedRaise:
	//	'diceRaise' '('
	//	diceToUse=[Dice] result=DiceRef
	//	')';
	public DiceBasedRaiseElements getDiceBasedRaiseAccess() {
		return pDiceBasedRaise;
	}
	
	public ParserRule getDiceBasedRaiseRule() {
		return getDiceBasedRaiseAccess().getRule();
	}
	
	/// * Steigerung um einen Wert * / ConstantBasedRaise:
	//	'constantRaise' '('
	//	result=INT
	//	')';
	public ConstantBasedRaiseElements getConstantBasedRaiseAccess() {
		return pConstantBasedRaise;
	}
	
	public ParserRule getConstantBasedRaiseRule() {
		return getConstantBasedRaiseAccess().getRule();
	}
	
	/// * Steigerung/Änderung von Combinations * / CombinationRaise:
	//	'combinationRaise' name=ValidID '('
	//	actions+=CombinationRaiseType+
	//	')';
	public CombinationRaiseElements getCombinationRaiseAccess() {
		return pCombinationRaise;
	}
	
	public ParserRule getCombinationRaiseRule() {
		return getCombinationRaiseAccess().getRule();
	}
	
	//CombinationRaiseType:
	//	AddCombination | DeleteCombination;
	public CombinationRaiseTypeElements getCombinationRaiseTypeAccess() {
		return pCombinationRaiseType;
	}
	
	public ParserRule getCombinationRaiseTypeRule() {
		return getCombinationRaiseTypeAccess().getRule();
	}
	
	//AddCombination:
	//	'addComb(' add=Combination ')';
	public AddCombinationElements getAddCombinationAccess() {
		return pAddCombination;
	}
	
	public ParserRule getAddCombinationRule() {
		return getAddCombinationAccess().getRule();
	}
	
	//DeleteCombination:
	//	'delComb(' delete=Combination ')';
	public DeleteCombinationElements getDeleteCombinationAccess() {
		return pDeleteCombination;
	}
	
	public ParserRule getDeleteCombinationRule() {
		return getDeleteCombinationAccess().getRule();
	}
	
	/// ***************************
	// * Decision Table
	// *************************** / // TODO wie verwendet?
	/// * Entscheidungstabelle, nur strukturelle Angabe, alle Logik und Validation in Xtend
	// * Kopfzeile zur Benennung der Spalten, manuelle Entscheidung zur Formatierung ob Condition('-') oder Consequence('|')
	// * Anzahl der Bedingungen und Konsequenzen muss angegeben werden, damit spätere Überprüfbarkeit gegeben ist
	// * Formatierung als richtige Tabelle schwer, liegt nicht im Fokus.
	// * 
	// * / DecisionTable:
	//	'decisionTable' name=ID ('(' numberConditionRows=INT ',' numberConsequenceRows=INT ')')?
	//	'['
	//	//	headerRow=HeaderRow
	//	rows+=Row*
	//	']';
	public DecisionTableElements getDecisionTableAccess() {
		return pDecisionTable;
	}
	
	public ParserRule getDecisionTableRule() {
		return getDecisionTableAccess().getRule();
	}
	
	//enum DecisionTablePart:
	//	row | numberConditionRows | numberConsequenceRows | name | RowRef;
	public DecisionTablePartElements getDecisionTablePartAccess() {
		return eDecisionTablePart;
	}
	
	public EnumRule getDecisionTablePartRule() {
		return getDecisionTablePartAccess().getRule();
	}
	
	//DecisionTableRef:
	//	decisionTable=[DecisionTable] '.' part=DecisionTablePart;
	public DecisionTableRefElements getDecisionTableRefAccess() {
		return pDecisionTableRef;
	}
	
	public ParserRule getDecisionTableRefRule() {
		return getDecisionTableRefAccess().getRule();
	}
	
	////HeaderRow:
	////	headerLabels+=ValidID (('--' headerLabels+=ValidID) | ('||' headerLabels+=ValidID))*
	////;
	//Row:
	//	'i=' index=INT ':'
	//	conditions+=Condition ('-' conditions+=Condition)*
	//	consequences+=Consequence ('|' consequences+=Consequence)*;
	public RowElements getRowAccess() {
		return pRow;
	}
	
	public ParserRule getRowRule() {
		return getRowAccess().getRule();
	}
	
	//enum RowPart:
	//	index | conditions | consequences;
	public RowPartElements getRowPartAccess() {
		return eRowPart;
	}
	
	public EnumRule getRowPartRule() {
		return getRowPartAccess().getRule();
	}
	
	//RowRef:
	//	row=[Row] '.' part=RowPart;
	public RowRefElements getRowRefAccess() {
		return pRowRef;
	}
	
	public ParserRule getRowRefRule() {
		return getRowRefAccess().getRule();
	}
	
	/// * überprüfbare boolische Bedingung bezogen auf numerischen Wert , derzeit nur 2wertig angedacht, 3wertig kann sicher ergänzt werden* /
	//Condition:
	//	condName=ValidID '('
	//	expression=ConditionTargets op=RelOpTo INT
	//	')';
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//RelOpTo:
	//	'=' | '<' | '>' | '!=' | '<' '=' | '>' '=';
	public RelOpToElements getRelOpToAccess() {
		return pRelOpTo;
	}
	
	public ParserRule getRelOpToRule() {
		return getRelOpToAccess().getRule();
	}
	
	/// * Referenzen zu Attributen und Kombinationen, die in den Conditions verwendet werden können. * / / * Conditions können CombiniedAttributes enthalten. Es soll abgefragt werden können. 
	// * CombiniedAttr können allerdings kein direktes Ziel darstellen, da sie berechnet werden.
	// * / ConditionTargets:
	//	AttributeRef | CombinedAttributeRef | CombinationRef;
	public ConditionTargetsElements getConditionTargetsAccess() {
		return pConditionTargets;
	}
	
	public ParserRule getConditionTargetsRule() {
		return getConditionTargetsAccess().getRule();
	}
	
	/// * Auswirkungen wenn die Bedingungen erfüllt werden, bisher nur auf zwei mögliche Ziele ausgerichtet, Attr+Combination * /
	//Consequence:
	//	target=ConsequenceRef
	//	effect=[Raise];
	public ConsequenceElements getConsequenceAccess() {
		return pConsequence;
	}
	
	public ParserRule getConsequenceRule() {
		return getConsequenceAccess().getRule();
	}
	
	//enum ConsequenceRef:
	//	AttributeRef | CombinationRef;
	public ConsequenceRefElements getConsequenceRefAccess() {
		return eConsequenceRef;
	}
	
	public EnumRule getConsequenceRefRule() {
		return getConsequenceRefAccess().getRule();
	}
	
	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}
	
	//XAssignment XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}
	
	//OpSingleAssign:
	//	'=';
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}
	
	//OpMultiAssign:
	//	'+=' | '-=' | '*=' | '/=' | '%=' |
	//	'<' '<' '=' |
	//	'>' '>'? '>=';
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}
	
	//XOrExpression XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}
	
	//OpOr:
	//	'||';
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}
	
	//XAndExpression XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}
	
	//OpAnd:
	//	'&&';
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}
	
	//XEqualityExpression XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}
	
	//OpEquality:
	//	'==' | '!=' | '===' | '!==';
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}
	
	//XRelationalExpression XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} 'instanceof') type=JvmTypeReference |
	//	=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}
	
	//OpCompare:
	//	'>=' | '<' '=' | '>' | '<';
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}
	
	//XOtherOperatorExpression XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}
	
	//OpOther:
	//	'->'
	//	| '..<'
	//	| '>' '..'
	//	| '..'
	//	| '=>'
	//	| '>' (=> ('>' '>') | '>') | '<' (=> ('<' '<') | '<' | '=>') | '<>'
	//	| '?:';
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}
	
	//XAdditiveExpression XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}
	
	//OpAdd:
	//	'+' | '-';
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}
	
	//XMultiplicativeExpression XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}
	
	//OpMulti:
	//	'*' | '**' | '/' | '%';
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}
	
	//XUnaryOperation XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation
	//	| XCastedExpression
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}
	
	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}
	
	//XCastedExpression XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} 'as') type=JvmTypeReference)*
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}
	
	//XPostfixOperation XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}
	
	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}
	
	//XMemberFeatureCall XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ('.' | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment
	//	| => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ('<'
	//	typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (memberCallArguments+=XShortClosure
	//	| memberCallArguments+=XExpression (',' memberCallArguments+=XExpression)*)?
	//	')')?
	//	memberCallArguments+=XClosure?)*
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}
	
	//XPrimaryExpression XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}
	
	//XLiteral XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}
	
	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}
	
	//XSetLiteral:
	//	{XSetLiteral} '#' '{' (elements+=XExpression (',' elements+=XExpression)*)? '}';
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}
	
	//XListLiteral:
	//	{XListLiteral} '#' '[' (elements+=XExpression (',' elements+=XExpression)*)? ']';
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}
	
	//XClosure XExpression:
	//	=> ({XClosure}
	//	'[')
	//	=> ((declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|')?
	//	expression=XExpressionInClosure
	//	']'
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}
	
	//XExpressionInClosure XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ';'?)*
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}
	
	//XShortClosure XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter (',' declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?='|') expression=XExpression
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}
	
	//XParenthesizedExpression XExpression:
	//	'(' XExpression ')'
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}
	
	//XIfExpression XExpression:
	//	{XIfExpression}
	//	'if' '(' if=XExpression ')'
	//	then=XExpression (=> 'else' else=XExpression)?
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}
	
	//XSwitchExpression XExpression:
	//	{XSwitchExpression}
	//	'switch' (=> ('(' declaredParam=JvmFormalParameter ':') switch=XExpression ')'
	//	| => (declaredParam=JvmFormalParameter ':')? switch=XExpression) '{'
	//	cases+=XCasePart* ('default' ':' default=XExpression)?
	//	'}'
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}
	
	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ('case' case=XExpression)? (':' then=XExpression | fallThrough?=',');
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}
	
	//XForLoopExpression XExpression:
	//	=> ({XForLoopExpression}
	//	'for' '(' declaredParam=JvmFormalParameter ':') forExpression=XExpression ')'
	//	eachExpression=XExpression
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}
	
	//XBasicForLoopExpression XExpression:
	//	{XBasicForLoopExpression}
	//	'for' '(' (initExpressions+=XExpressionOrVarDeclaration (',' initExpressions+=XExpressionOrVarDeclaration)*)? ';'
	//	expression=XExpression? ';' (updateExpressions+=XExpression (',' updateExpressions+=XExpression)*)? ')'
	//	eachExpression=XExpression
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}
	
	//XWhileExpression XExpression:
	//	{XWhileExpression}
	//	'while' '(' predicate=XExpression ')'
	//	body=XExpression
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}
	
	//XDoWhileExpression XExpression:
	//	{XDoWhileExpression}
	//	'do'
	//	body=XExpression
	//	'while' '(' predicate=XExpression ')'
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}
	
	//XBlockExpression XExpression:
	//	{XBlockExpression}
	//	'{' (expressions+=XExpressionOrVarDeclaration ';'?)*
	//	'}'
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}
	
	//XExpressionOrVarDeclaration XExpression:
	//	XVariableDeclaration | XExpression
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}
	
	//XVariableDeclaration XExpression:
	//	{XVariableDeclaration} (writeable?='var' | 'val') (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ('='
	//	right=XExpression)?
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}
	
	//JvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}
	
	//FullJvmFormalParameter types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}
	
	//XFeatureCall XExpression:
	//	{XFeatureCall} ('<' typeArguments+=JvmArgumentTypeReference (',' typeArguments+=JvmArgumentTypeReference)* '>')?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?='(' (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression (',' featureCallArguments+=XExpression)*)?
	//	')')?
	//	featureCallArguments+=XClosure?
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}
	
	//FeatureCallID:
	//	ValidID | 'extends' | 'static' | 'import' | 'extension';
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}
	
	//IdOrSuper:
	//	FeatureCallID | 'super';
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}
	
	//XConstructorCall XExpression:
	//	{XConstructorCall}
	//	'new' constructor=[types::JvmConstructor|QualifiedName] (=> '<' typeArguments+=JvmArgumentTypeReference (','
	//	typeArguments+=JvmArgumentTypeReference)* '>')? (=> explicitConstructorCall?='(' (arguments+=XShortClosure
	//	| arguments+=XExpression (',' arguments+=XExpression)*)?
	//	')')?
	//	arguments+=XClosure?
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}
	
	//XBooleanLiteral XExpression:
	//	{XBooleanLiteral} ('false' | isTrue?='true')
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}
	
	//XNullLiteral XExpression:
	//	{XNullLiteral} 'null'
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}
	
	//XNumberLiteral XExpression:
	//	{XNumberLiteral} value=Number
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}
	
	//XStringLiteral XExpression:
	//	{XStringLiteral} value=STRING
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}
	
	//XTypeLiteral XExpression:
	//	{XTypeLiteral} 'typeof' '(' type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ')'
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}
	
	//XThrowExpression XExpression:
	//	{XThrowExpression} 'throw' expression=XExpression
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}
	
	//XReturnExpression XExpression:
	//	{XReturnExpression} 'return' -> expression=XExpression?
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}
	
	//XTryCatchFinallyExpression XExpression:
	//	{XTryCatchFinallyExpression}
	//	'try'
	//	expression=XExpression (catchClauses+=XCatchClause+ (=> 'finally' finallyExpression=XExpression)?
	//	| 'finally' finallyExpression=XExpression)
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}
	
	//XSynchronizedExpression XExpression:
	//	=> ({XSynchronizedExpression}
	//	'synchronized' '(') param=XExpression ')' expression=XExpression
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}
	
	//XCatchClause:
	//	=> 'catch' '(' declaredParam=FullJvmFormalParameter ')' expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}
	
	//QualifiedName:
	//	ValidID (=> '.' ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Number hidden():
	//	HEX | (INT | DECIMAL) ('.' (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}
	
	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID '::')+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}
	
	//terminal HEX:
	//	('0x' | '0X') ('0'..'9' | 'a'..'f' | 'A'..'F' | '_')+ ('#' (('b' | 'B') ('i' | 'I') | ('l' | 'L')))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9' ('0'..'9' | '_')*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	}
	
	//terminal DECIMAL:
	//	INT (('e' | 'E') ('+' | '-')? INT)? (('b' | 'B') ('i' | 'I' | 'd' | 'D') | ('l' | 'L' | 'd' | 'D' | 'f' | 'F'))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	}
	
	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)*
	//	| XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXtype.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}
	
	//ArrayBrackets:
	//	'[' ']';
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXtype.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}
	
	//XFunctionTypeRef:
	//	('(' (paramTypes+=JvmTypeReference (',' paramTypes+=JvmTypeReference)*)? ')')? '=>' returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXtype.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}
	
	//JvmParameterizedTypeReference:
	//	type=[JvmType|super::QualifiedName] (=> '<' arguments+=JvmArgumentTypeReference (','
	//	arguments+=JvmArgumentTypeReference)* '>' (=> ({JvmInnerTypeReference.outer=current} '.') type=[JvmType|ValidID] (=>
	//	'<' arguments+=JvmArgumentTypeReference (',' arguments+=JvmArgumentTypeReference)* '>')?)*)?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXtype.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}
	
	//JvmArgumentTypeReference JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXtype.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}
	
	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} '?' (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*
	//	| constraints+=JvmLowerBound constraints+=JvmLowerBoundAnded*)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXtype.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}
	
	//JvmUpperBound:
	//	'extends' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXtype.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}
	
	//JvmUpperBoundAnded JvmUpperBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXtype.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}
	
	//JvmLowerBound:
	//	'super' typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXtype.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}
	
	//JvmLowerBoundAnded JvmLowerBound:
	//	'&' typeReference=JvmTypeReference
	public XtypeGrammarAccess.JvmLowerBoundAndedElements getJvmLowerBoundAndedAccess() {
		return gaXtype.getJvmLowerBoundAndedAccess();
	}
	
	public ParserRule getJvmLowerBoundAndedRule() {
		return getJvmLowerBoundAndedAccess().getRule();
	}
	
	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXtype.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	super::QualifiedName '.' '*';
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXtype.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXtype.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}
	
	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXtype.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}
	
	//XImportDeclaration:
	//	'import' (static?='static' extension?='extension'? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?='*' | memberName=ValidID) | importedType=[JvmDeclaredType|super::QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ';'?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXtype.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}
	
	//QualifiedNameInStaticImport:
	//	(ValidID '.')+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXtype.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '$' | '_') ('a'..'z' | 'A'..'Z' | '$' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaXtype.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"'? |
	//	"'" ('\\' . | !('\\' | "'"))* "'"?;
	public TerminalRule getSTRINGRule() {
		return gaXtype.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaXtype.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXtype.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaXtype.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXtype.getANY_OTHERRule();
	}
}
