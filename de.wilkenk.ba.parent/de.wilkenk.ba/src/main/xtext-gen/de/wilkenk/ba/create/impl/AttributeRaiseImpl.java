/**
 * generated by Xtext 2.10.0
 */
package de.wilkenk.ba.create.impl;

import de.wilkenk.ba.create.Attribute;
import de.wilkenk.ba.create.AttributeRaise;
import de.wilkenk.ba.create.AttributeRaiseType;
import de.wilkenk.ba.create.CreatePackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Attribute Raise</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.wilkenk.ba.create.impl.AttributeRaiseImpl#getTarget <em>Target</em>}</li>
 *   <li>{@link de.wilkenk.ba.create.impl.AttributeRaiseImpl#getTries <em>Tries</em>}</li>
 *   <li>{@link de.wilkenk.ba.create.impl.AttributeRaiseImpl#getValueChange <em>Value Change</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AttributeRaiseImpl extends RaiseImpl implements AttributeRaise
{
  /**
   * The cached value of the '{@link #getTarget() <em>Target</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTarget()
   * @generated
   * @ordered
   */
  protected Attribute target;

  /**
   * The default value of the '{@link #getTries() <em>Tries</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTries()
   * @generated
   * @ordered
   */
  protected static final int TRIES_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getTries() <em>Tries</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTries()
   * @generated
   * @ordered
   */
  protected int tries = TRIES_EDEFAULT;

  /**
   * The cached value of the '{@link #getValueChange() <em>Value Change</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValueChange()
   * @generated
   * @ordered
   */
  protected AttributeRaiseType valueChange;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AttributeRaiseImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CreatePackage.Literals.ATTRIBUTE_RAISE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribute getTarget()
  {
    if (target != null && target.eIsProxy())
    {
      InternalEObject oldTarget = (InternalEObject)target;
      target = (Attribute)eResolveProxy(oldTarget);
      if (target != oldTarget)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, CreatePackage.ATTRIBUTE_RAISE__TARGET, oldTarget, target));
      }
    }
    return target;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribute basicGetTarget()
  {
    return target;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTarget(Attribute newTarget)
  {
    Attribute oldTarget = target;
    target = newTarget;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CreatePackage.ATTRIBUTE_RAISE__TARGET, oldTarget, target));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getTries()
  {
    return tries;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setTries(int newTries)
  {
    int oldTries = tries;
    tries = newTries;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CreatePackage.ATTRIBUTE_RAISE__TRIES, oldTries, tries));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AttributeRaiseType getValueChange()
  {
    return valueChange;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetValueChange(AttributeRaiseType newValueChange, NotificationChain msgs)
  {
    AttributeRaiseType oldValueChange = valueChange;
    valueChange = newValueChange;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, CreatePackage.ATTRIBUTE_RAISE__VALUE_CHANGE, oldValueChange, newValueChange);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setValueChange(AttributeRaiseType newValueChange)
  {
    if (newValueChange != valueChange)
    {
      NotificationChain msgs = null;
      if (valueChange != null)
        msgs = ((InternalEObject)valueChange).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - CreatePackage.ATTRIBUTE_RAISE__VALUE_CHANGE, null, msgs);
      if (newValueChange != null)
        msgs = ((InternalEObject)newValueChange).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - CreatePackage.ATTRIBUTE_RAISE__VALUE_CHANGE, null, msgs);
      msgs = basicSetValueChange(newValueChange, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CreatePackage.ATTRIBUTE_RAISE__VALUE_CHANGE, newValueChange, newValueChange));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case CreatePackage.ATTRIBUTE_RAISE__VALUE_CHANGE:
        return basicSetValueChange(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CreatePackage.ATTRIBUTE_RAISE__TARGET:
        if (resolve) return getTarget();
        return basicGetTarget();
      case CreatePackage.ATTRIBUTE_RAISE__TRIES:
        return getTries();
      case CreatePackage.ATTRIBUTE_RAISE__VALUE_CHANGE:
        return getValueChange();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CreatePackage.ATTRIBUTE_RAISE__TARGET:
        setTarget((Attribute)newValue);
        return;
      case CreatePackage.ATTRIBUTE_RAISE__TRIES:
        setTries((Integer)newValue);
        return;
      case CreatePackage.ATTRIBUTE_RAISE__VALUE_CHANGE:
        setValueChange((AttributeRaiseType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CreatePackage.ATTRIBUTE_RAISE__TARGET:
        setTarget((Attribute)null);
        return;
      case CreatePackage.ATTRIBUTE_RAISE__TRIES:
        setTries(TRIES_EDEFAULT);
        return;
      case CreatePackage.ATTRIBUTE_RAISE__VALUE_CHANGE:
        setValueChange((AttributeRaiseType)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CreatePackage.ATTRIBUTE_RAISE__TARGET:
        return target != null;
      case CreatePackage.ATTRIBUTE_RAISE__TRIES:
        return tries != TRIES_EDEFAULT;
      case CreatePackage.ATTRIBUTE_RAISE__VALUE_CHANGE:
        return valueChange != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (tries: ");
    result.append(tries);
    result.append(')');
    return result.toString();
  }

} //AttributeRaiseImpl
