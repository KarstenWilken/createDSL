/**
 * generated by Xtext 2.10.0
 */
package de.wilkenk.ba.create.impl;

import de.wilkenk.ba.create.AddCombination;
import de.wilkenk.ba.create.Addition;
import de.wilkenk.ba.create.Attribute;
import de.wilkenk.ba.create.AttributePart;
import de.wilkenk.ba.create.AttributeRaise;
import de.wilkenk.ba.create.AttributeRaiseType;
import de.wilkenk.ba.create.AttributeRef;
import de.wilkenk.ba.create.Category;
import de.wilkenk.ba.create.Combination;
import de.wilkenk.ba.create.CombinationCondition;
import de.wilkenk.ba.create.CombinationPart;
import de.wilkenk.ba.create.CombinationRaise;
import de.wilkenk.ba.create.CombinationRaiseType;
import de.wilkenk.ba.create.CombinationRef;
import de.wilkenk.ba.create.CombinedAttribute;
import de.wilkenk.ba.create.CombinedAttributePart;
import de.wilkenk.ba.create.CombinedAttributeRef;
import de.wilkenk.ba.create.Condition;
import de.wilkenk.ba.create.ConditionTargets;
import de.wilkenk.ba.create.Consequence;
import de.wilkenk.ba.create.ConsequenceRef;
import de.wilkenk.ba.create.ConstantBasedRaise;
import de.wilkenk.ba.create.CreateFactory;
import de.wilkenk.ba.create.CreatePackage;
import de.wilkenk.ba.create.DecisionTable;
import de.wilkenk.ba.create.DecisionTablePart;
import de.wilkenk.ba.create.DecisionTableRef;
import de.wilkenk.ba.create.DeleteCombination;
import de.wilkenk.ba.create.Dice;
import de.wilkenk.ba.create.DiceBasedRaise;
import de.wilkenk.ba.create.DicePart;
import de.wilkenk.ba.create.DiceRef;
import de.wilkenk.ba.create.Domainmodel;
import de.wilkenk.ba.create.Entity;
import de.wilkenk.ba.create.InitAttribute;
import de.wilkenk.ba.create.InitialAttributeDecision;
import de.wilkenk.ba.create.IntRef;
import de.wilkenk.ba.create.MathExpression;
import de.wilkenk.ba.create.Multiplication;
import de.wilkenk.ba.create.Property;
import de.wilkenk.ba.create.Raise;
import de.wilkenk.ba.create.Row;
import de.wilkenk.ba.create.RowPart;
import de.wilkenk.ba.create.RowRef;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class CreateFactoryImpl extends EFactoryImpl implements CreateFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static CreateFactory init()
  {
    try
    {
      CreateFactory theCreateFactory = (CreateFactory)EPackage.Registry.INSTANCE.getEFactory(CreatePackage.eNS_URI);
      if (theCreateFactory != null)
      {
        return theCreateFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new CreateFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CreateFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case CreatePackage.DOMAINMODEL: return createDomainmodel();
      case CreatePackage.ENTITY: return createEntity();
      case CreatePackage.CHARACTER: return createCharacter();
      case CreatePackage.PROPERTY: return createProperty();
      case CreatePackage.ATTRIBUTE: return createAttribute();
      case CreatePackage.ATTRIBUTE_REF: return createAttributeRef();
      case CreatePackage.INITIAL_ATTRIBUTE_DECISION: return createInitialAttributeDecision();
      case CreatePackage.INIT_ATTRIBUTE: return createInitAttribute();
      case CreatePackage.CATEGORY: return createCategory();
      case CreatePackage.COMBINED_ATTRIBUTE: return createCombinedAttribute();
      case CreatePackage.COMBINED_ATTRIBUTE_REF: return createCombinedAttributeRef();
      case CreatePackage.MATH_EXPRESSION: return createMathExpression();
      case CreatePackage.INT_REF: return createIntRef();
      case CreatePackage.COMBINATION: return createCombination();
      case CreatePackage.COMBINATION_REF: return createCombinationRef();
      case CreatePackage.COMBINATION_CONDITION: return createCombinationCondition();
      case CreatePackage.DICE: return createDice();
      case CreatePackage.DICE_REF: return createDiceRef();
      case CreatePackage.DICE_PART: return createDicePart();
      case CreatePackage.RAISE: return createRaise();
      case CreatePackage.ATTRIBUTE_RAISE: return createAttributeRaise();
      case CreatePackage.ATTRIBUTE_RAISE_TYPE: return createAttributeRaiseType();
      case CreatePackage.DICE_BASED_RAISE: return createDiceBasedRaise();
      case CreatePackage.CONSTANT_BASED_RAISE: return createConstantBasedRaise();
      case CreatePackage.COMBINATION_RAISE: return createCombinationRaise();
      case CreatePackage.COMBINATION_RAISE_TYPE: return createCombinationRaiseType();
      case CreatePackage.ADD_COMBINATION: return createAddCombination();
      case CreatePackage.DELETE_COMBINATION: return createDeleteCombination();
      case CreatePackage.DECISION_TABLE: return createDecisionTable();
      case CreatePackage.DECISION_TABLE_REF: return createDecisionTableRef();
      case CreatePackage.ROW: return createRow();
      case CreatePackage.ROW_REF: return createRowRef();
      case CreatePackage.CONDITION: return createCondition();
      case CreatePackage.CONDITION_TARGETS: return createConditionTargets();
      case CreatePackage.CONSEQUENCE: return createConsequence();
      case CreatePackage.ADDITION: return createAddition();
      case CreatePackage.MULTIPLICATION: return createMultiplication();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case CreatePackage.ATTRIBUTE_PART:
        return createAttributePartFromString(eDataType, initialValue);
      case CreatePackage.COMBINED_ATTRIBUTE_PART:
        return createCombinedAttributePartFromString(eDataType, initialValue);
      case CreatePackage.COMBINATION_PART:
        return createCombinationPartFromString(eDataType, initialValue);
      case CreatePackage.DECISION_TABLE_PART:
        return createDecisionTablePartFromString(eDataType, initialValue);
      case CreatePackage.ROW_PART:
        return createRowPartFromString(eDataType, initialValue);
      case CreatePackage.CONSEQUENCE_REF:
        return createConsequenceRefFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case CreatePackage.ATTRIBUTE_PART:
        return convertAttributePartToString(eDataType, instanceValue);
      case CreatePackage.COMBINED_ATTRIBUTE_PART:
        return convertCombinedAttributePartToString(eDataType, instanceValue);
      case CreatePackage.COMBINATION_PART:
        return convertCombinationPartToString(eDataType, instanceValue);
      case CreatePackage.DECISION_TABLE_PART:
        return convertDecisionTablePartToString(eDataType, instanceValue);
      case CreatePackage.ROW_PART:
        return convertRowPartToString(eDataType, instanceValue);
      case CreatePackage.CONSEQUENCE_REF:
        return convertConsequenceRefToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Domainmodel createDomainmodel()
  {
    DomainmodelImpl domainmodel = new DomainmodelImpl();
    return domainmodel;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Entity createEntity()
  {
    EntityImpl entity = new EntityImpl();
    return entity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public de.wilkenk.ba.create.Character createCharacter()
  {
    CharacterImpl character = new CharacterImpl();
    return character;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Property createProperty()
  {
    PropertyImpl property = new PropertyImpl();
    return property;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Attribute createAttribute()
  {
    AttributeImpl attribute = new AttributeImpl();
    return attribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AttributeRef createAttributeRef()
  {
    AttributeRefImpl attributeRef = new AttributeRefImpl();
    return attributeRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InitialAttributeDecision createInitialAttributeDecision()
  {
    InitialAttributeDecisionImpl initialAttributeDecision = new InitialAttributeDecisionImpl();
    return initialAttributeDecision;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InitAttribute createInitAttribute()
  {
    InitAttributeImpl initAttribute = new InitAttributeImpl();
    return initAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Category createCategory()
  {
    CategoryImpl category = new CategoryImpl();
    return category;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CombinedAttribute createCombinedAttribute()
  {
    CombinedAttributeImpl combinedAttribute = new CombinedAttributeImpl();
    return combinedAttribute;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CombinedAttributeRef createCombinedAttributeRef()
  {
    CombinedAttributeRefImpl combinedAttributeRef = new CombinedAttributeRefImpl();
    return combinedAttributeRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MathExpression createMathExpression()
  {
    MathExpressionImpl mathExpression = new MathExpressionImpl();
    return mathExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public IntRef createIntRef()
  {
    IntRefImpl intRef = new IntRefImpl();
    return intRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Combination createCombination()
  {
    CombinationImpl combination = new CombinationImpl();
    return combination;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CombinationRef createCombinationRef()
  {
    CombinationRefImpl combinationRef = new CombinationRefImpl();
    return combinationRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CombinationCondition createCombinationCondition()
  {
    CombinationConditionImpl combinationCondition = new CombinationConditionImpl();
    return combinationCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Dice createDice()
  {
    DiceImpl dice = new DiceImpl();
    return dice;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DiceRef createDiceRef()
  {
    DiceRefImpl diceRef = new DiceRefImpl();
    return diceRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DicePart createDicePart()
  {
    DicePartImpl dicePart = new DicePartImpl();
    return dicePart;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Raise createRaise()
  {
    RaiseImpl raise = new RaiseImpl();
    return raise;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AttributeRaise createAttributeRaise()
  {
    AttributeRaiseImpl attributeRaise = new AttributeRaiseImpl();
    return attributeRaise;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AttributeRaiseType createAttributeRaiseType()
  {
    AttributeRaiseTypeImpl attributeRaiseType = new AttributeRaiseTypeImpl();
    return attributeRaiseType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DiceBasedRaise createDiceBasedRaise()
  {
    DiceBasedRaiseImpl diceBasedRaise = new DiceBasedRaiseImpl();
    return diceBasedRaise;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConstantBasedRaise createConstantBasedRaise()
  {
    ConstantBasedRaiseImpl constantBasedRaise = new ConstantBasedRaiseImpl();
    return constantBasedRaise;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CombinationRaise createCombinationRaise()
  {
    CombinationRaiseImpl combinationRaise = new CombinationRaiseImpl();
    return combinationRaise;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CombinationRaiseType createCombinationRaiseType()
  {
    CombinationRaiseTypeImpl combinationRaiseType = new CombinationRaiseTypeImpl();
    return combinationRaiseType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AddCombination createAddCombination()
  {
    AddCombinationImpl addCombination = new AddCombinationImpl();
    return addCombination;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DeleteCombination createDeleteCombination()
  {
    DeleteCombinationImpl deleteCombination = new DeleteCombinationImpl();
    return deleteCombination;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DecisionTable createDecisionTable()
  {
    DecisionTableImpl decisionTable = new DecisionTableImpl();
    return decisionTable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DecisionTableRef createDecisionTableRef()
  {
    DecisionTableRefImpl decisionTableRef = new DecisionTableRefImpl();
    return decisionTableRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Row createRow()
  {
    RowImpl row = new RowImpl();
    return row;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RowRef createRowRef()
  {
    RowRefImpl rowRef = new RowRefImpl();
    return rowRef;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Condition createCondition()
  {
    ConditionImpl condition = new ConditionImpl();
    return condition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConditionTargets createConditionTargets()
  {
    ConditionTargetsImpl conditionTargets = new ConditionTargetsImpl();
    return conditionTargets;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Consequence createConsequence()
  {
    ConsequenceImpl consequence = new ConsequenceImpl();
    return consequence;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Addition createAddition()
  {
    AdditionImpl addition = new AdditionImpl();
    return addition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Multiplication createMultiplication()
  {
    MultiplicationImpl multiplication = new MultiplicationImpl();
    return multiplication;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AttributePart createAttributePartFromString(EDataType eDataType, String initialValue)
  {
    AttributePart result = AttributePart.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertAttributePartToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CombinedAttributePart createCombinedAttributePartFromString(EDataType eDataType, String initialValue)
  {
    CombinedAttributePart result = CombinedAttributePart.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertCombinedAttributePartToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CombinationPart createCombinationPartFromString(EDataType eDataType, String initialValue)
  {
    CombinationPart result = CombinationPart.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertCombinationPartToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DecisionTablePart createDecisionTablePartFromString(EDataType eDataType, String initialValue)
  {
    DecisionTablePart result = DecisionTablePart.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDecisionTablePartToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RowPart createRowPartFromString(EDataType eDataType, String initialValue)
  {
    RowPart result = RowPart.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertRowPartToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ConsequenceRef createConsequenceRefFromString(EDataType eDataType, String initialValue)
  {
    ConsequenceRef result = ConsequenceRef.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertConsequenceRefToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CreatePackage getCreatePackage()
  {
    return (CreatePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static CreatePackage getPackage()
  {
    return CreatePackage.eINSTANCE;
  }

} //CreateFactoryImpl
